<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ishkawa</title>
    <description></description>
    <link>http://blog.ishkawa.org/</link>
    <atom:link href="http://blog.ishkawa.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 01 Jul 2014 01:23:17 +0900</pubDate>
    <lastBuildDate>Tue, 01 Jul 2014 01:23:17 +0900</lastBuildDate>
    <generator>Jekyll v2.1.0</generator>
    
      <item>
        <title>gcovrでコードカバレッジを確認</title>
        <description>&lt;p&gt;手元ではCoverStoryを使っていたのですが、なんか使いづらかったのでgcovrを使い始めました。&lt;br&gt;
gcovr 3.1にはhtml出力がついていて、以下のようなコマンドでレポートを出力してくれます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gcovr \
    -r . \
    --html --html-detail \
    -o build/coverage.html \
    -e Pods \
    -e UnitTests \
    -e &amp;quot;.*\.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出力されるHTMLは以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-05-25/list.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;ファイルを選択すると各行の状況を確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-05-25/detail.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 25 May 2014 21:15:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/05/25/gcovr/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/05/25/gcovr/</guid>
        
        
      </item>
    
      <item>
        <title>連休だったので&quot;初めてのRuby&quot;を読んだ</title>
        <description>&lt;p&gt;普段はObjective-Cしか書かないのですが、podspecやPodfileやRakefileを書くときにちょっとだけRubyを書く機会がありました。
Rubyは初心者にも優しい言語ということもあって、いままでは適当に他のコードを真似しながら書けていたのですが、
さすがにそういう状態を続けるのは良くないなあと思い、連休中にRubyを勉強することにしました。
プログラミング自体は職を得る程度には習得しているし、特にRubyで実現したいものがあるわけではないので、本を選ぶ上では以下の2点を重視しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プログラミング自体の初心者向けではない&lt;/li&gt;
&lt;li&gt;言語の解説に集中している&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;quot;初めてのRuby&amp;quot;はこの2つを重視する自分にとってはとても良い本でした。
言語を理解する上での要点が高い密度でまとまっており、連休中に読み終えるには適したボリュームだと思います。&lt;/p&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4873113679/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873113679&amp;linkCode=as2&amp;tag=ishkawa-22&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4873113679&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=ishkawa-22&quot; &gt;&lt;/a&gt;&lt;img src=&quot;http://ir-jp.amazon-adsystem.com/e/ir?t=ishkawa-22&amp;l=as2&amp;o=9&amp;a=4873113679&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 May 2014 00:48:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/05/06/learning-ruby/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/05/06/learning-ruby/</guid>
        
        
      </item>
    
      <item>
        <title>すべてのテストケースの前後にあれこれする</title>
        <description>&lt;p&gt;iOSのアプリケーションテストを書いていると、各テストケースの前後に永続ストアやスタブサーバーなどをリセットしたくなることがあると思います。
リセットが必要なテストスイートのsetUp/tearDownに書いても良いのですが、書くのが面倒だったり書き忘れてしまうこともあるので、
すべてのテストケースについてリセットが走るようにしておいた方が心を穏やかにすることができると思います。&lt;/p&gt;

&lt;h3&gt;実現方法&lt;/h3&gt;

&lt;p&gt;すぐに思いついたのは以下のような方法です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setUp/tearDownにリセット処理を加えたサブクラスを継承させる&lt;/li&gt;
&lt;li&gt;XCTestCaseのsetUp/tearDownをswizzleする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サブクラスを継承させる方法には、KIFTestCaseなど他のライブラリのクラスには適用ができないという問題があります。
method swizzlingを利用する方法は、他のmethod swizzlingと衝突する可能性があるのでなるべく避けたいものです。&lt;/p&gt;

&lt;p&gt;そこで、着目したのがXCTestObserverです。
XCTestObserverは以下のようなイベントが発生したときに対応したメソッドを実行します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テストの開始/終了&lt;/li&gt;
&lt;li&gt;テストスイートの開始/終了&lt;/li&gt;
&lt;li&gt;テストケースの開始/終了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらのイベントを受け取るには予めNSUserDefaultsのXCTestObserverClassKeyというキーにクラス名を設定しておく必要があります。
具体的には、以下のようなクラスを作成します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISTestObserver&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@autoreleasepool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;NSUserDefaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUserDefaults&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standardUserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;XCTestLog,ISTestObserver&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCTestObserverClassKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testCaseDidStart:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCTestRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;testRun&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// reset&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testCaseDidStop:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCTestRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;testRun&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// reset&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;リセット処理の例&lt;/h3&gt;

&lt;p&gt;自分が利用している例を紹介します。&lt;/p&gt;

&lt;h4&gt;NSUserDefaultsのリセット&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- (void)removeStandardUserDefaultsPersistentDomain
{
    NSString *bundleIndetifier = [NSBundle mainBundle].bundleIdentifier;
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    [userDefaults removePersistentDomainForName:bundleIndetifier];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;NSHTTPCookieStorageのリセット&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAllCookies&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSHTTPCookieStorage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookieStrage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSHTTPCookieStorage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedHTTPCookieStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookieStrage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookieStrage&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;deleteCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;OHHTTPStubsのリセットと汎用スタブ&lt;/h4&gt;

&lt;p&gt;汎用スタブはテスト実行中に誤って外のURLを読みに行かないようにするためにtestCaseDidStart:で用意しています。
testCaseDidStart:はsetUpよりも先に実行されるので、setUpで他のスタブを追加した場合にはそちらが優先されます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stubGeneralRequest&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OHHTTPStubs&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stubRequestsPassingTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withStubResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OHHTTPStubsResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Dummy&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataUsingEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OHHTTPStubsResponse&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;responseWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
                                          &lt;span class=&quot;nl&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
                                             &lt;span class=&quot;nl&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAllStubs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OHHTTPStubs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeAllStubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OHHTTPStubsの優先順位についてはREADMEに次のように書かれています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When a network request is performed by the system, the stubs are called in the reverse order that they have been added, the last added stub having priority over the first added ones. The first stub that returns YES for the first parameter of stubRequestsPassingTest:withStubResponse: is then used to reply to the request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;CoreDataの永続ストアの削除&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ishkawa/ISPersistentStack&quot;&gt;ISPersistentStack&lt;/a&gt;を利用しています。
deleteCurrentStoreの実装については&lt;a href=&quot;https://github.com/ishkawa/ISPersistentStack/blob/master/ISPersistentStack/ISPersistentStack.m&quot;&gt;ソース&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dropDatabase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISPersistentStack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleteCurrentStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 30 Apr 2014 13:25:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/04/30/pre-post-test-case/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/04/30/pre-post-test-case/</guid>
        
        
      </item>
    
      <item>
        <title>位置情報でリモコンを操作するiOSアプリをリリースしました</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/2014-04-28/icon.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/jp/app/geo-ir/id856152824&quot;&gt;Geo IR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Geo IRという名前でリリースしました。例えば、以下のような用途に利用できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最寄り駅についたらでエアコンをつける&lt;/li&gt;
&lt;li&gt;自宅に近づいたら照明を点灯させる&lt;/li&gt;
&lt;li&gt;自宅から離れたら様々な電子機器の電源を落とす&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に1つ目の用途は便利で、冬には家に着く頃には部屋が暖まった状態にすることができますし、夏には冷えた状態にすることが出来ます。&lt;/p&gt;

&lt;h3&gt;利用できる位置情報&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-04-28/trigger.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;アプリを反応させるイベントには以下の2つを指定できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ターゲットエリア: 指定地点から半径nメートル&lt;/li&gt;
&lt;li&gt;トリガー: ターゲットエリアへの進入時または退出時&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの情報を組み合わせて、&amp;quot;最寄り駅に付いた&amp;quot;や&amp;quot;自宅から離れた&amp;quot;といったイベントを定義します。&lt;/p&gt;

&lt;h3&gt;利用できるリモコン信号&lt;/h3&gt;

&lt;p&gt;基本的にはどのようなリモコンも利用することができます。&lt;/p&gt;

&lt;h3&gt;その他必要なもの&lt;/h3&gt;

&lt;p&gt;Geo IRの利用にはIRKitが必要です。IRKitはAmazonで購入することができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/dp/B00H91KK26&quot;&gt;Amazon.co.jp: IRKit - iPhone,iPadを使って外出先からエアコン等の家電を操作できる学習リモコン&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;使い方&lt;/h3&gt;

&lt;h4&gt;1. IRKitのセットアップ&lt;/h4&gt;

&lt;p&gt;起動後に表示される指示に従ってください。&lt;br&gt;
セットアップが上手くいかない場合は、アプリの再起動とIRKitのリセットをして上で再度試してみてください。&lt;/p&gt;

&lt;h4&gt;2. リモコン信号のセットアップ&lt;/h4&gt;

&lt;p&gt;設定画面からリモコン信号画面に移り、+ボタンを押してください。&lt;br&gt;
以下のような画面が表示されたら、IRKitに向けてリモコン信号を送ってください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-04-28/signal.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;3. 位置情報のセットアップ&lt;/h4&gt;

&lt;p&gt;ターゲットエリアとトリガーを指定してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-04-28/region.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;4. 移動する&lt;/h4&gt;

&lt;p&gt;指定したエリアに移動してみてください。リモコン信号の送信が成功すると(失敗すると)アプリに通知が届きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-04-28/notification.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;5. 動作を確認する&lt;/h4&gt;

&lt;p&gt;履歴画面から確認できます。送信に失敗してしまった場合には、再送信することも出来ます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-04-28/history.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;その他&lt;/h3&gt;

&lt;p&gt;Geo IRには広告を非表示にするオプションが有るのですが、In App Purchaseのproduct登録をうっかり忘れてしまったので1.0.0では利用できません。
このオプションの利用を希望する方は、1.0.1がリリースされるまでお待ちください。&lt;/p&gt;

&lt;p&gt;アプリのダウンロードは以下のリンクからどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/jp/app/geo-ir/id856152824&quot;&gt;Geo IR&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Apr 2014 21:27:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/04/28/geo-ir/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/04/28/geo-ir/</guid>
        
        
      </item>
    
      <item>
        <title>iOS開発とGitタグ</title>
        <description>&lt;p&gt;いままでAppleにアプリを申請するタイミングでタグを打っていて、
その後にリジェクトされると以下のようなタグが残ることがありました。
非常にダサいですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.0.0&lt;/li&gt;
&lt;li&gt;1.0.0-2&lt;/li&gt;
&lt;li&gt;1.0.0-3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近は少し学習して、QAに入る段階でrelease/1.0.0といったブランチを切るようにしました。
審査に出した段階ではまだタグは打たず、もしもリジェクトされた場合は引き続きrelease/1.0.0を更新します。
審査を通過した場合はそこでタグを打って、release/1.0.0をmasterにマージします。
以下の図のようなイメージです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-04-20/git-tag.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;このように運用することで、余計なタグが打たれることはありませんし、審査中のバージョンを見失うこともありません。
もしかしたら普通のiOSデベロッパーは当たり前のように実践していることなのかもしれませんが、
自分は最近までダサいタグを打ったり、タグを打ち直したりしてたので書きました。&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Apr 2014 14:18:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/04/20/ios-git-tag/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/04/20/ios-git-tag/</guid>
        
        
      </item>
    
      <item>
        <title>ISMemoryCache 0.1.0</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://cocoapods.org/?q=cache&quot;&gt;世の中にはたくさんキャッシュの実装があり&lt;/a&gt;、
&lt;a href=&quot;https://speakerdeck.com/ninjinkun/sdwebimagewo1nian-ban-shi-tutemita&quot;&gt;自前の実装は捨てろ&lt;/a&gt;なんて言われたりするのですが、
それでも自分の思い通りのキャッシュ機構を作りたくなるものだと思います。
自分はlimitに達したときにすべてのオブジェクトを削除するようなメモリキャッシュではなく、
他からの参照がないオブジェクトを選択して削除するようなメモリキャッシュが欲しかったのでISMemoryCacheを実装しました。
最近、ISMemoryCacheを更新して0.1.0を出したので、その機能を紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリがバックグラウンドに入ったときに他からの参照がないオブジェクトを削除&lt;/li&gt;
&lt;li&gt;メモリ警告が出たときにすべてのオブジェクトを削除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ディスクキャッシュについてはISDiskCacheというのもあるので、そちらをどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ishkawa/ISMemoryCache&quot;&gt;ISMemoryCache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ishkawa/ISDiskCache&quot;&gt;ISDiskCache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 13 Apr 2014 20:56:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/04/13/ismemorycache-0-dot-1-0/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/04/13/ismemorycache-0-dot-1-0/</guid>
        
        
      </item>
    
      <item>
        <title>iOSシミュレータの日本語フォントが変になるのを防ぐ</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://frnk.hatenablog.jp/entry/2014/02/04/120053&quot;&gt;iOSシミュレータの日本語フォントが変になっちゃったときの対処法 - らっこのじゆうちょう&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらの記事にある通り、日本語よりも中国語が優先されていると日本語のフォントがおかしくなってしまうのですが、設定画面から日本語に設定し直すのはちょっとだけ面倒です。
Arguments Passes On Launchに以下の値を設定しておくと、必ず日本語に設定された状態でアプリが立ち上がるので、付き合いが長いプロジェクトでは設定しておくと楽かもしれません。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-AppleLanguages (ja)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2014-02-04/ss.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&quot;http://qiita.com/jarinosuke@github/items/f83e846ffb866ca5b7b7&quot;&gt;iOS - Launch Arguments を使った一つ上の NSLocalizedString - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Feb 2014 14:03:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/02/04/ja-font/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/02/04/ja-font/</guid>
        
        
      </item>
    
      <item>
        <title>#confwd でOSSでのObjective-Cの書き方について話してきた</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://confwd2.peatix.com&quot;&gt;Conference With Developers 2 | Peatix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自分はiOSデベロッパーとして大した経験や実績があるわけではないのですが、
公開しているライブラリの数はかなり多い方のなので、そこで得られた知識を話そうと思いました。
トーク中は聴いている人のリアクションを気にする余裕もなかったのですが、
あとからTwitterのタイムラインを読んでみると、良い反応をしてくれている方もいたようで嬉しかったです。
今回の発表ではどのトピックも詳細に立ち入ることが難しかったので、いつか文章でしっかりとまとめられるといいなと思いました。&lt;/p&gt;

&lt;h3&gt;トークの準備&lt;/h3&gt;

&lt;p&gt;大勢の前で45分も話し続けるのは初めてだったので、どうやって準備したらいいものか悩みました。
スライドをつくりながらトークの内容を練るのは難しそうだったので、はじめはmarkdownで適当な文章を書いて、
そこからの大事な単語や文を拾ってきたり、概念図を描き起こしたりしました。
元のmarkdownは以下のものです。人に読まれることを想定して書いたわけではないので読みづらいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/ishkawa/82fb589f447394f37546&quot;&gt;gist:82fb589f447394f37546&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;資料&lt;/h3&gt;

&lt;p&gt;　 &lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;be0674406d3f0131488e0ea0271811b0&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;ビデオ&lt;/h3&gt;

&lt;p&gt;&lt;iframe width=&quot;720&quot; height=&quot;437&quot; src=&quot;http://www.ustream.tv/embed/recorded/43319245/highlight/461451?v=3&amp;amp;wmode=direct&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border: 0px none transparent;&quot;&gt;    &lt;/iframe&gt;&lt;br /&gt;&lt;a href=&quot;http://www.ustream.tv/&quot; style=&quot;padding: 2px 0px 4px; width: 400px; background: #ffffff; display: block; color: #000000; font-weight: normal; font-size: 10px; text-decoration: underline; text-align: center;&quot; target=&quot;_blank&quot;&gt;Video streaming by Ustream&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;p&gt;トークやLTはどれも面白く、他の開発者との交流でき、とても充実したイベントでした。
登壇を提案していただいた矢口さん、開催スタッフのみなさんに感謝しています。&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Feb 2014 16:11:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/02/02/programming-guide-for-oss-in-confwd2/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/02/02/programming-guide-for-oss-in-confwd2/</guid>
        
        
      </item>
    
      <item>
        <title>XCTest + iOS 7でCoverallsを利用する</title>
        <description>&lt;p&gt;XCTest + iOS7でテストを実行しても上手くコードカバレッジが取得できずに困っていたのですが、
最近&lt;a href=&quot;https://twitter.com/tokorom&quot;&gt;@tokorom&lt;/a&gt;さんが取得できる方法を紹介していたので、
そちらを参考にして対応してみました。資料は以下のものです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/tokorom/my-unit-test-environment-for-objective-c&quot;&gt;My unit test environment for Objective-C&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coverallsに対応したライブラリは以下のものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/ishkawa/ISHTTPOperation&quot;&gt;ISHTTPOperation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/ishkawa/ISDiskCache&quot;&gt;ISDiskCache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/ishkawa/ISMemoryCache&quot;&gt;ISMemoryCache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/ishkawa/NSRunLoop-PerformBlock&quot;&gt;NSRunLoop+PerformBlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;対応の肝となるのは&lt;a href=&quot;http://github.com/ishkawa/ISGcovFlusher&quot;&gt;ISGcovFlusher&lt;/a&gt;をテストターゲットに追加しておくことです。
これを追加することでテスト終了時に&lt;code&gt;__gcov_flush()&lt;/code&gt;を自動的に呼んでくれて&lt;code&gt;*.gcda&lt;/code&gt;が出力されるようになります。
なお、&lt;code&gt;__gcov_flush()&lt;/code&gt;を呼び出すにはBuild Settingsの&amp;quot;Instrument Program Flow&amp;quot;と&amp;quot;Generate Test Coverage Files&amp;quot;をYESにする必要があるようです。&lt;/p&gt;

&lt;p&gt;その他の詳しいことは各リポジトリの以下のファイルを参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Podfile&lt;/li&gt;
&lt;li&gt;Makefile&lt;/li&gt;
&lt;li&gt;.travis.yml&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 15 Jan 2014 23:14:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/01/15/ios7-xctest-coveralls/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/01/15/ios7-xctest-coveralls/</guid>
        
        
      </item>
    
      <item>
        <title>デバッグ中にJSONをサッと出力する</title>
        <description>&lt;p&gt;NSDictionaryやNSArrayのdescriptionはそれとなく見やすいフォーマットで出力されますが、JSONで欲しくなる場合があります。
しかも、デバッグ中に欲しくなったりします。
XcodeのLLDBは&lt;code&gt;~/.lldbinit-Xcode&lt;/code&gt;に独自のコマンドを定義することができるので、
pretty printedなJSONを吐くコマンドを定義してカジュアルにJSONを得られるようにしてみました。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;command regex pj &amp;#39;s/^(.+)$/po [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:%1 options:1 error:nil] encoding:4]/&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで定義した&lt;code&gt;pj&lt;/code&gt;コマンドを使うと以下のようなNSDictionaryから&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;01-08-2014&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;s&quot;&gt;@&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;03:55:15&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;s&quot;&gt;@&amp;quot;epoch&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;@1389196515937&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のようなJSONを得られます&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;time&amp;quot; : &amp;quot;03:55:15&amp;quot;,
  &amp;quot;epoch&amp;quot; : 1389196515937,
  &amp;quot;date&amp;quot; : &amp;quot;01-08-2014&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;元ネタは&lt;a href=&quot;https://twitter.com/dealforest/status/420943227294736384&quot;&gt;@dealforest&lt;/a&gt;さんの以下の記事です。&lt;br&gt;
UIViewのrecursiveDescriptionを出力するコマンドなどの便利な例も紹介されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/dealforest/items/e3a5284badd17733ccc1&quot;&gt;続・Debugger の Tips - Qiita [キータ]&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jan 2014 00:44:00 +0900</pubDate>
        <link>http://blog.ishkawa.org/2014/01/09/lldb-json/</link>
        <guid isPermaLink="true">http://blog.ishkawa.org/2014/01/09/lldb-json/</guid>
        
        
      </item>
    
  </channel>
</rss>
