{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/1583660817/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ishkawa"}},"markdownRemark":{"id":"29295306-9e97-5a77-bd0b-d834a3ae698d","excerpt":"はJSONのシリアライズ/デシリアライズを行うパッケージ。\nクラスにアノテーションをつけると、JSON…","html":"<p><a href=\"https://github.com/dart-lang/json_serializable\"><code class=\"language-text\">json_serializable</code></a>はJSONのシリアライズ/デシリアライズを行うパッケージ。\nクラスに<code class=\"language-text\">@JsonSerializable</code>アノテーションをつけると、JSONの変換コードを生成してくれるという方式になっている。</p>\n<p>生成するコードのオプションは色々と揃っていて、カスタムの型変換を指定する方法も当然用意されている。フィールドに指定する<code class=\"language-text\">@JsonKey</code>アノテーションには<code class=\"language-text\">fromJson</code>と<code class=\"language-text\">toJson</code>が設定でき、ここで型変換の関数を指定できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token metadata function\">@JsonSerializable</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token metadata function\">@JsonKey</span><span class=\"token punctuation\">(</span>fromJson<span class=\"token punctuation\">:</span> dateTimeFromJson<span class=\"token punctuation\">,</span> toJson<span class=\"token punctuation\">:</span> dateTimeToJson<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">DateTime</span> dateTime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>プロジェクトが小さいうちはこれで十分かもしれないが、プロジェクトが大きくなって何度も同じ設定を書くようになると、段々とつらくなってくる。</p>\n<p>そんなわけで、<code class=\"language-text\">@JsonKey</code>アノテーションなしでカスタムの型変換を実現する方法を模索した。</p>\n<h2>コード生成の流れを探る</h2>\n<p><code class=\"language-text\">json_serializable</code>のコード生成は、<a href=\"https://github.com/dart-lang/build/tree/master/build_runner\"><code class=\"language-text\">build_runner</code></a>というパッケージが提供する仕組みに乗っかって実現されている。<code class=\"language-text\">pub run build_runner build</code>を実行すると、<code class=\"language-text\">json_serializable</code>の<code class=\"language-text\">build.yaml</code>から設定を読み出し、何をすべきか判断するという流れになっている。</p>\n<p>で、<code class=\"language-text\">json_serializable</code>では<code class=\"language-text\">JsonSerializableGenerator</code>クラスを呼び出すように設定されているので、ここに手を加えればカスタムの型変換を追加できることがわかる。</p>\n<p><code class=\"language-text\">JsonSerializableGenerator</code>クラスの内部では、個々の型変換は<code class=\"language-text\">TypeHelper</code>のサブクラス群が担っており、使用する<code class=\"language-text\">TypeHelper</code>は<code class=\"language-text\">JsonSerializableGenerator</code>クラスのコンストラクタで指定できる。ここにカスタムの型変換を行う<code class=\"language-text\">TypeHelper</code>を追加すれば、カスタムの型変換をビルトインの型変換と同様に扱えるようになる。</p>\n<p>以上をまとめると、やりたいことが実現するには次のものが必要そうだ。</p>\n<ul>\n<li>カスタムの型変換を行う<code class=\"language-text\">TypeHelper</code>を用意する。</li>\n<li>パッケージを作成し、<code class=\"language-text\">build.yaml</code>で↑を使うコードジェネレーターを設定する。</li>\n</ul>\n<h2>型変換の実装</h2>\n<p><code class=\"language-text\">TypeHelper</code>クラスを継承し、<code class=\"language-text\">serialize()</code>メソッドと<code class=\"language-text\">deserialize()</code>メソッドを実装する。それぞれのメソッドには変換対象の式と変換元(先)の型が渡されるので、必要に応じて変換するコードを文字列として返す。</p>\n<p><code class=\"language-text\">json_serializable</code>の<a href=\"https://github.com/dart-lang/json_serializable/tree/4e89afeb60530fe8c9e309e9325a75ab6d3ab523/json_serializable/lib/src/type_helpers\"><code class=\"language-text\">json_serializable/lib/src/type_helpers</code></a>に実際に使われている<code class=\"language-text\">TypeHelper</code>の例があるので、参考にすると理解が早い。</p>\n<p>例として、JSONのUNIXミリ秒のnumberをDartの<code class=\"language-text\">DateTime</code>クラスに変換する<code class=\"language-text\">TypeHelper</code>を実装した。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnixmillisecondHelper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TypeHelper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> _typeChecker <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeChecker</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromUrl</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'dart:core#DateTime'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">UnixmillisecondHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">DartType</span> targetType<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span> expression<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">TypeHelperContext</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_typeChecker<span class=\"token punctuation\">.</span><span class=\"token function\">isExactlyType</span><span class=\"token punctuation\">(</span>targetType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>nullable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      expression <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">expression</span></span><span class=\"token string\">?'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">expression</span></span><span class=\"token string\">.millisecondsSinceEpoch'</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">DartType</span> targetType<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span> expression<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">TypeHelperContext</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_typeChecker<span class=\"token punctuation\">.</span><span class=\"token function\">isExactlyType</span><span class=\"token punctuation\">(</span>targetType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span>nullable\n        <span class=\"token operator\">?</span> <span class=\"token string-literal\"><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">expression</span></span><span class=\"token string\"> == null ? null : DateTime.fromMillisecondsSinceEpoch(</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">expression</span></span><span class=\"token string\">)'</span></span>\n        <span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'DateTime.fromMillisecondsSinceEpoch(</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">expression</span></span><span class=\"token string\">)'</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>ビルダーの設定</h2>\n<p><code class=\"language-text\">build_runner</code>にカスタムの<code class=\"language-text\">JsonSerializableGenerator</code>を認識してもらうには、<code class=\"language-text\">build.yaml</code>で<code class=\"language-text\">Builder</code>を返す関数を指定する。<code class=\"language-text\">build.yaml</code>の設定の書き方や<code class=\"language-text\">Builder</code>を返す関数の書き方は、<code class=\"language-text\">json_serializable</code>の<a href=\"https://github.com/dart-lang/json_serializable/blob/4e89afeb60530fe8c9e309e9325a75ab6d3ab523/json_serializable/build.yaml\"><code class=\"language-text\">json_serializable/build.yaml</code></a>や<a href=\"https://github.com/dart-lang/json_serializable/blob/4e89afeb60530fe8c9e309e9325a75ab6d3ab523/json_serializable/lib/builder.dart\"><code class=\"language-text\">json_serializable/lib/builder.dart</code></a>を参考にすれば良い。</p>\n<p>今回は次のようにして、<code class=\"language-text\">UnixmillisecondHelper</code>を使う<code class=\"language-text\">Builder</code>を返した。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">Builder</span> <span class=\"token function\">customJsonSerializable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuilderOptions</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonSerializable</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">SharedPartBuilder</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">JsonSerializableGenerator</span><span class=\"token punctuation\">(</span>\n          config<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">,</span>\n          typeHelpers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token class-name\">UnixmillisecondHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">const</span> <span class=\"token class-name\">JsonLiteralGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-literal\"><span class=\"token string\">'custom_json_serializable'</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">CheckedFromJsonException</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> lines <span class=\"token operator\">=</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span>\n      <span class=\"token string-literal\"><span class=\"token string\">'Could not parse the options provided for `json_serializable`.'</span></span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      lines<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'There is a problem with \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">e<span class=\"token punctuation\">.</span>key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\".'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      lines<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>innerError <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      lines<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>innerError<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">StateError</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'\\n'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">build.yaml</code>は以下のように書いた。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">builders</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">custom_json_serializable</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">import</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"package:custom_json_serializable/builder.dart\"</span>\n    <span class=\"token key atrule\">builder_factories</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"customJsonSerializable\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">build_extensions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">\".dart\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"custom_json_serializable.g.part\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">auto_apply</span><span class=\"token punctuation\">:</span> dependents\n    <span class=\"token key atrule\">build_to</span><span class=\"token punctuation\">:</span> cache\n    <span class=\"token key atrule\">applies_builders</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"source_gen|combining_builder\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2>実際にコードを生成する</h2>\n<p>例として、以下のようなファイルを用意した。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:json_annotation/json_annotation.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">part</span> <span class=\"token string-literal\"><span class=\"token string\">'item.g.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token metadata function\">@JsonSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">DateTime</span> createdAt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createdAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">factory</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">></span></span> json<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> _$<span class=\"token class-name\">ItemFromJson</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> _$<span class=\"token class-name\">ItemToJson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">pubspec.yaml</code>の<code class=\"language-text\">dependencies</code>に<code class=\"language-text\">json_annotation</code>を追加し、<code class=\"language-text\">dev_dependencies</code>に作成したパッケージと<code class=\"language-text\">build_runner</code>を追加する。そして、<code class=\"language-text\">pub run build_runner build</code>を実行すると、以下のようなファイルが生成された。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// GENERATED CODE - DO NOT MODIFY BY HAND</span>\n\n<span class=\"token keyword\">part</span> of <span class=\"token string-literal\"><span class=\"token string\">'item.dart'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// **************************************************************************</span>\n<span class=\"token comment\">// JsonSerializableGenerator</span>\n<span class=\"token comment\">// **************************************************************************</span>\n\n<span class=\"token class-name\">Item</span> _$<span class=\"token class-name\">ItemFromJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">></span></span> json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>\n    json<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'name'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">as</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    json<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'createdAt'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\n        <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromMillisecondsSinceEpoch</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'createdAt'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">></span></span> _$<span class=\"token class-name\">ItemToJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> instance<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n      <span class=\"token string-literal\"><span class=\"token string\">'name'</span></span><span class=\"token punctuation\">:</span> instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      <span class=\"token string-literal\"><span class=\"token string\">'createdAt'</span></span><span class=\"token punctuation\">:</span> instance<span class=\"token punctuation\">.</span>createdAt<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>millisecondsSinceEpoch<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>生成されたコードから<code class=\"language-text\">DateTime</code>とUNIXミリ秒の相互変換を行っていることがわかる。また、実際に<code class=\"language-text\">Item('Apple', DateTime(2020, 3, 8))</code>をJSONに変換すると、以下のようになった。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"createdAt\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1583593200000</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>感想</h2>\n<p><code class=\"language-text\">json_serializable</code>のコードベースはカスタマイズしやすい構造になっていると感じた。とはいえ、この記事で紹介したようなを調査して、実際にカスタマイズできるようになるにはそれなりに時間が掛かったし、パッケージの利用者がカスタマイズしやすい状態になっているとは言い難い。</p>\n<p>プラグインみたいな機構ができて、アプリケーションの<code class=\"language-text\">pubspec.yaml</code>と<code class=\"language-text\">build.yaml</code>の設定だけで型変換のルールを追加できたら、もっと幅広い利用者が使えるようになるんじゃないかと思う。</p>\n<h2>サンプルコード</h2>\n<ul>\n<li><a href=\"https://github.com/ishkawa/custom_json_serializable_example\">https://github.com/ishkawa/custom_json_serializable_example</a></li>\n</ul>","frontmatter":{"title":"Dartのjson_serializableにカスタムの型変換を追加する","date":"2020/03/09","description":"","image":null}}},"pageContext":{"slug":"/1583660817/","previous":{"fields":{"slug":"/1573776089/"},"frontmatter":{"title":"ローカルのKubernetesでGCRのイメージをpullする"}},"next":{"fields":{"slug":"/1584277737/"},"frontmatter":{"title":"ブログをGatsbyで再構築した"}}}},
    "staticQueryHashes": ["2841359383"]}