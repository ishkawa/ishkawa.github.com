<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.ishkawa.org]]></title>
  <link href="http://blog.ishkawa.org/atom.xml" rel="self"/>
  <link href="http://blog.ishkawa.org/"/>
  <updated>2013-12-15T11:17:02+09:00</updated>
  <id>http://blog.ishkawa.org/</id>
  <author>
    <name><![CDATA[ishkawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[xcodebuildのログをxcprettyで整える]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/12/11/xcpretty/"/>
    <updated>2013-12-11T00:16:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/12/11/xcpretty</id>
    <content type="html"><![CDATA[<p>Xcode 5になってから<code>xcodebuild</code>も進化していて、Xcode 4までネックになっていたApplication Testsの実行も簡単になりました。
そういうわけで自分にとっての<code>xctool</code>の必要性は薄まり、あとはログさえキレイになってくれればいいのになあと思っていたのですが、そんなときに<code>xcpretty</code>が登場しました。</p>

<p><a href="https://github.com/mneorr/XCPretty">mneorr/XCPretty</a></p>

<h3>xctoolとの違い</h3>

<p><code>xctool</code>は<code>xcodebuild</code>を置き換えることを目的としていましたが、<code>xcpretty</code>は<code>xcodebuild</code>と共存してログの整形のみを行います。
<code>xctool</code>の場合、&#8221;<code>xcodebuild</code>では動くけど<code>xctool</code>では動かない&#8221;という状況に遭遇することがありますが、
<code>xcpretty</code>はビルドやテストの実行自体に<code>xcodebuild</code>を利用するので、既に<code>xcodebuild</code>で進んでいるプロジェクトでは簡単に利用を始めることができます。</p>

<h3>インストール方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install xcpretty</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcodebuild | xcpretty -c</span></code></pre></td></tr></table></div></figure>


<h3>実行例</h3>

<p>例として<a href="https://github.com/ishkawa/ISHTTPOperation">ISHTTPOperation</a>のユニットテストの結果を<code>xcpretty</code>で出力します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcodebuild clean test -sdk iphonesimulator -scheme ISHTTPOperation -configuration Debug -destination "name=iPhone Retina (3.5-inch),OS=7.0" | xcpretty -c</span></code></pre></td></tr></table></div></figure>


<p>結果は以下のようになります。テスト結果として必要十分な情報量だと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>✓ Cleaning ISHTTPOperation/ISHTTPOperation [Debug]
</span><span class='line'>✓ Building ISHTTPOperation/ISHTTPOperation [Debug]
</span><span class='line'>✓ Compiling ISHTTPOperationQueue.m
</span><span class='line'>✓ Compiling NSOperationQueue+HTTP.m
</span><span class='line'>✓ Compiling ISHTTPOperation.m
</span><span class='line'>✓ Building library libISHTTPOperation.a
</span><span class='line'>✓ Building ISHTTPOperation/ISHTTPOperationTests [Debug]
</span><span class='line'>✓ Running script 'Run Script'
</span><span class='line'>Test Suite '/Users/ishkawa/Library/Developer/Xcode/DerivedData/ISHTTPOperation-bmnqbihsbwzsicguaxfhmfoznrvq/Build/Products/Debug-iphonesimulator/ISHTTPOperationTests.octest(Tests)' started
</span><span class='line'>Test Suite 'ISHTTPOperationQueueTests' started
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithHTTPMethod (0.016 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithHost (0.001 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithPath (0.001 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithURL (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testDefaultQueue (0.002 seconds)
</span><span class='line'>Test Suite 'ISHTTPOperationTests' started
</span><span class='line'>✓  ISHTTPOperationTests testCancel (0.100 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testCancelAsynchronously (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testConcurrencyType (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testDeallocOnCancelAfterStart (0.100 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testDeallocOnCancelBeforeStart (0.100 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testDesignatedInitializer (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testErrorConnection (0.101 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testNormalConnection (0.202 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testQueueing (0.000 seconds)
</span><span class='line'>Test Suite 'NSOperationQueueHTTPTests' started
</span><span class='line'>✓  NSOperationQueueHTTPTests testDefaultHTTPQueue (0.000 seconds)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis CIがXcode 5に対応してからのあれこれ]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/28/xcode-5-xcodebuild/"/>
    <updated>2013-11-28T20:34:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/28/xcode-5-xcodebuild</id>
    <content type="html"><![CDATA[<p>Xcode 5のxcodebuildでテストを実行するには<code>xcodebuild test</code>を使うといいみたいです。
<code>man xcodebuild</code>のbuildactionの説明に以下のように書かれているので<code>-scheme SchemeName</code>が必要となります。
Travis CIなどの手元以外の環境でbuild schemeを利用する場合には、他の環境でも同じbuild schemeを使えるようにする必要があるので、
あらかじめXcodeのManage SchemeというメニューのShareというチェックボックスを有効しておく必要があります。</p>

<blockquote><p>This requires specifying a scheme and optionally a destination.</p></blockquote>

<p>Xcode 4のときにはMakefileを以下のように書いていましたが</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test:
</span><span class='line'>    xcodebuild \
</span><span class='line'>        -sdk iphonesimulator \
</span><span class='line'>        -target ISFooTests \
</span><span class='line'>        -configuration Debug \
</span><span class='line'>        clean build \
</span><span class='line'>        TEST_AFTER_BUILD=YES</span></code></pre></td></tr></table></div></figure>


<p><code>xcodebuild test</code>を使う形式に書き換えると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test:
</span><span class='line'>    xcodebuild \
</span><span class='line'>        -sdk iphonesimulator \
</span><span class='line'>        -scheme ISFoo \
</span><span class='line'>        -configuration Debug \
</span><span class='line'>        clean build test</span></code></pre></td></tr></table></div></figure>


<p>という感じになります。</p>

<p>Xcode 4では普通にテストを書いて適切にcpp-coverallsを実行すればコードカバレッジまで取得できたのですが、
Xcode 5では<code>*.gcda</code>が出力されなくなってしまったらしくてそのままではコードカバレッジを測れないようです。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/_ishkawa">@_ishkawa</a> iOS7だと.gcdaが出てこない問題?&#10;<a href="http://t.co/PCPIVz2BDU">http://t.co/PCPIVz2BDU</a>&#10;<a href="https://t.co/4ESNcybO8W">https://t.co/4ESNcybO8W</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/statuses/405963463421218816">2013, 11月 28</a></blockquote>


<script async src="http://blog.ishkawa.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>詳しい話は<a href="https://twitter.com/azu_re">@azu_re</a>さんのツイートのリンク先に書いてあって、
テスト完了後に<code>__gcov_flush()</code>というものを実行すると解決できるようなのですが、まだ試していません。</p>

<p>上手くいっている例があったら覗きに行きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[単体テストの実行時に非同期処理を待つ]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/22/wait-async-task/"/>
    <updated>2013-11-22T00:23:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/22/wait-async-task</id>
    <content type="html"><![CDATA[<p>SenTestingKit/XCTestは非同期処理を待たずにテストケースを終了してしまうので、
直接SenTestingKit/XCTestを利用する場合には自分でNSRunLoopを回して処理の完了を待つ必要があります。
これまでSenTestCaseにfinishedフラグが追加されたサブクラスを使ったりしていたのですが、
どうしてもテストコードが明示的にならなくて悩んでいました。</p>

<p>いままで書いていたテストコードは以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testExample</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// step 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// step 3</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">stopWaiting</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// step 2</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">startWaiting</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// step 4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これではどのようにして待っているのかあまり想像がつきませんし、順序をひと目で理解することも難しいです。
そこで、昨日新しい方法を考えました。
以下のように書くと、実行順序も上から順番通りになりますし、何をしているのか明示的になったと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testPerformBlockAndWait</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// step 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">performBlockAndWait:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="o">*</span><span class="n">finish</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">// step 2</span>
</span><span class='line'>            <span class="o">*</span><span class="n">finish</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// step 3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NSRunLoopのperformBlockAndWait:は新しく拡張したメソッドで、名前からわかる通りNSManagedObjectContextの
performBlockAndWait:を使っているときに思いつきました。
BOOL *を渡すアイディアはNSArrayのenumerateObjectsUsingBlock:を真似しました。</p>

<p>このコードを使えるようにするためのNSRunLoopのカテゴリはまとめて以下のリポジトリに置いてあります。
興味がある人は是非使ってみてください。
もっといいアイディアがあるという人は是非教えて下さい。</p>

<p><a href="https://github.com/ishkawa/NSRunLoop-PerformBlock">NSRunLoop-PerformBlock</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISPersistentStackというCoreDataのヘルパーを書いた]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/18/persistent-stack/"/>
    <updated>2013-11-18T01:23:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/18/persistent-stack</id>
    <content type="html"><![CDATA[<p>最近iOS 4を相手にする機会がなくなったので、いつも使うCoreDataのヘルパーを共通化しようと思い、ついでに公開することにしました。
あまり他人が使うことを想定したつくりになっていないので、そのまま使おうとするとちょっと苦労するかもしれません。</p>

<p><a href="https://github.com/ishkawa/ISPersistentStack">ISPersistentStack</a></p>

<p>いままで使っていたものをそのままコピペすればOKかと思っていたんですが、できるだけ幅広い構造に対応できるようにするには
いくらか抽象化が必要となりました。サブクラスを作ってしまえば&#8221;一般的な&#8221;ケースには対応できると思うのですが、
少し凝ったつくりには対応できない場合があると思います。(そういう理由もあって、CocoaPodsには送らない予定です。)</p>

<h3>主な機能</h3>

<ul>
<li>メインのNSManagedObjectContextの提供</li>
<li>永続ストアとNSManagedObjectModelの互換性のチェック</li>
<li>永続ストアの廃棄</li>
</ul>


<p>Web APIのクライアントのアプリの場合、消してはいけないデータはあまりないので、自分はよく以下のようにして使います。
このようにすると、永続ストアのモデルとバンドルされているモデルが一致しない場合にデータベースを捨ててくれます。
捨ててはいけないデータがある場合にも<code>#ifdef DEBUG</code>を利用すればデバッグに役立つかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">ISPersistentStack</span> <span class="o">*</span><span class="n">persistentStack</span> <span class="o">=</span> <span class="p">[</span><span class="n">ISPersistentStack</span> <span class="n">sharedStack</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">persistentStack</span><span class="p">.</span><span class="n">isCompatibleWithCurrentStore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">persistentStack</span> <span class="n">deleteCurrentStore</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>想定しているケース</h3>

<ul>
<li>単一のNSPersistentStore</li>
<li>単一のNSManagedObjectModel(複数バージョンは想定内)</li>
<li>複数のNSManagedObjectContext(ただし、main queueのcontextはISPersistentStackが提供するものを利用)</li>
</ul>


<p>デフォルトで使用するNSPersistentStoreはドキュメント以下の<code>Model.sqlite</code>となっていて、
モデルはメインバンドル以下の<code>Model.momd</code>となっています。
もしここから外れる場合にはISPersistentStackのサブクラスを作成してstoreURL, modelURL, sharedStackをオーバーライドする必要があります。
その他にもmanagedObjectModel, persistentStoreCoordinator, managedObjectContextをオーバーライドすることもできます。</p>

<h3>感想</h3>

<p>CoreDataのオレオレ便利ヘルパーは他人にとっても使いやすい形にするのは難しいなあと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSONにNSNullが入ってきたとき]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/16/nsnull/"/>
    <updated>2013-11-16T20:55:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/16/nsnull</id>
    <content type="html"><![CDATA[<p>多くのiOSアプリはサーバーとの通信が必要で、やりとりされるデータのフォーマットにはJSONが採用されることが多いと思います。
iOS 5からは標準ライブラリにNSJSONSerializationが導入され、特に理由がなければJSONのエンコード/デコードにはこれを利用します。
NSJSONSerializationが扱うオブジェクトは以下の5種類のオブジェクトです。</p>

<ul>
<li>NSString</li>
<li>NSNumber</li>
<li>NSArray</li>
<li>NSDictionary</li>
<li>NSNull</li>
</ul>


<p>そこで心配になるのが、予期しないところにNSNullが入ってきて&#8221;unrecognized selector sent to instance.&ldquo;となってしまうことです。
NSNullではなくてnilが入っていてほしいと考える人は多いようですが、そもそもNSArrayやNSDictonaryはnilを含むことはできず、
そのような状況でnull値を表すためにNSNullが存在するのです。NSNullのドキュメントにもまさにその通りのことが書いてあります。</p>

<blockquote><p>The NSNull class defines a singleton object used to represent null values in collection objects (which don’t allow nil values).</p></blockquote>

<p>しかし、実際NSNullが原因となってクラッシュすることもあるので、それを回避する方法と、
それらの方法を利用するときに気をつけるべきことを書きます。</p>

<h3>NSNullをnilとして振る舞わせる方法</h3>

<p>NSNullのforwardInvocation:とmethodSignatureForSelector:を上手く書き換えると、
NSNullは実装されていないメソッドの呼び出しは無視するようになり、&#8221;unrecognized selector sent to instance.&ldquo;を回避できるようになります。
このテクニックは以前からよく知られていたもので、自分は<a href="https://twitter.com/k_katsumi">@k_katsumi</a>さんの
<a href="http://d.hatena.ne.jp/KishikawaKatsumi/20110505/1304598102">ブログ</a>で見たのが最初でした。
ライブラリとしてまとまっているものにはnicklockwood氏の<a href="https://github.com/nicklockwood/nullsafe">NullSafe</a>などがあります。</p>

<p>このテクニックの良いところはNSNullがオブジェクトであることを半分忘れてしまって、まるでnilのように扱えることです。
一度アプリの何処かでこれを実装してしまえば、二度とNSNullが&#8221;unrecognized selector sent to instance.&ldquo;をあげることがなくなります。</p>

<p>逆に良くないところもあって、その1つはNSNullは完全にnilになるわけではないということです。
例えば以下のコードで<code>[dictionary objectForKey:@"foo"]</code>がNSNullを返す場合、条件式はYESとなります。
つまり、NSNullは依然としてnilではなく、単に&#8221;unrecognized selector sent to instance&#8221;をあげなくなっただけということを頭に入れなければなりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">dictionary</span> <span class="nl">objectForKey:</span><span class="s">@&quot;foo&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、アプリ全体に影響を与えてしまうということもあまり良いことではないのかもしれません。
このテクニックはNSNullの本来の役割である&#8221;null値を表すsingleton&#8221;という性質を壊すことなく実装されているのですが、
CocoaPodsが十分に普及してきた昨今、グローバルなものの振る舞いを変えることは十分に検討した方が良さそうです。
それと、&#8221;処理上に明示されてない何かによって本来とは違う挙動になる&#8221;ということも忘れてはいけません。</p>

<h3>NSNullを一括で削除してしまう方法</h3>

<p>前の方法が高度なテクニックを利用したhackだったのに対して、こちらは愚直な方法です。
NSArrayやNSDictionaryのvalueを探索してNSNullを削除してしまえば、[NSArray objectAtIndex:]や
[NSDictionary objectForKey:]でNSNullが返ってくることはありません。
NSDictionaryに関して言えば、元々NSNullが入っていたkeyに対してobjectForKey:は本物のnilを返すので、
前のテクニックよりも望ましい状態になると言えます。</p>

<p>当然のことなんですが、NSNullが削除されてしまうと[NSArray count]や[[NSDictionary allValues] count]は変わってしまうので、
countが重要なケースではNSNullが削除されていることを頭に入れておく必要はあります。</p>

<p>NSNullの一括削除を実装するのは地味に面倒な上にミスをしやすいので、
自分はいつも<a href="https://github.com/ishkawa/ISRemoveNull">ISRemoveNull</a>を利用しています。
以下のようなコードでNSNullがすべて削除されたNSDictionaryを得ることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">strippedDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">dictionary</span> <span class="n">dictionaryByRemovingNull</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>ISRemoveNullはデフォルトで再帰的にNSArrayやNSDictionaryを探索するつくりになっているので、
深いネストがあるJSONのNSNullもすべて取り除くことができます。</p>

<h3>おまけ: NSNullを判別する条件式</h3>

<p>NSNullを判別する条件式は以下のものが妥当なようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">object</span> <span class="o">==</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// object is null</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>もちろん、<code>[object isEqual:[NSNull null]]</code>や<code>[object isKindOfClass:[NSNull class]]</code>でも判別できるのですが、
NSNullはそもそもsingletonなのでisEqual:やisKindOfClass:で比較する必要はないのです。
(必要はないというだけで、isEqual:やisKindOfClass:が間違いというわけではありません。)</p>

<p>ちなみに、Appleのサンプルコードでも<code>object == [NSNull null]</code>が利用されていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#potatotips で隅々までタップできるUINavigationBarの話をしました]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/15/potatotips-1/"/>
    <updated>2013-11-15T01:22:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/15/potatotips-1</id>
    <content type="html"><![CDATA[<p>potatotipsというのはクックパッドさんが開催しているiOS/Android開発者のtips共有会です。
普段は社内のメンバーで定期的に行っているそうなんですが、今回は社外の開発者も含めて開催でした。
持ち時間は1人あたり5分と短かったので、すぐに活用できそうなtipsが多かったように思います。</p>

<h3>話したこと</h3>

<p>iOS 7になってからUINavigationBarのcustomViewが中央寄りになってしまい、
バーの両サイドに配置されたカスタムボタンが押しにくいという問題が起きました。
これだけを理由にUINavigationBarを使うのを辞めるのはもったいないので、
customViewのフレームに影響されずに隅々までタップできるUINavigationBarを実現する方法を考えました。</p>

<p>実装のアイディアは結構単純で、customViewのフレーム外であってもタッチイベントの位置にsubviewがあれば、
タッチイベントを貫通させるというものです。イメージがつきにくい話だとは思うのですが、
たぶん同じような問題に直面した人には通じる話だと思います。</p>

<p>　</p>

<script async class="speakerdeck-embed" data-id="9d882ad02e7e0131dc8166d07d2effc2" data-ratio="1.33333333333333" src="http://blog.ishkawa.org//speakerdeck.com/assets/embed.js"></script>


<p>一応このtipsをライブラリにまとめたので、何を言ってるのかサッパリわからなかった人も、
以下のライブラリを入れればとにかくUINavigationBarが隅々までタップできるようになります。</p>

<p><a href="https://github.com/ishkawa/ISInteractiveEdgesNavigationBar">ISInteractiveEdgesNavigationBar</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Class</span> <span class="n">navigationBarClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">ISInteractiveEdgesNavigationBar</span> <span class="n">class</span><span class="p">];</span>
</span><span class='line'><span class="n">Class</span> <span class="n">toolbarClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIToolbar</span> <span class="n">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UINavigationController</span> <span class="o">*</span><span class="n">navigationController</span> <span class="o">=</span>
</span><span class='line'><span class="p">[[</span><span class="n">UINavigationController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithNavigationBarClass:</span><span class="n">navigationBarClass</span>
</span><span class='line'>                                              <span class="nl">toolbarClass:</span><span class="n">toolbarClass</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>感想</h3>

<p>tips共有会は小規模なら簡単に開催できるし有益なので、周りを適当に誘ってみよう思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数のiOSバージョンでのテストを自動的に実行する]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/10/06/run-tests-for-all-destinations/"/>
    <updated>2013-10-06T21:47:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/10/06/run-tests-for-all-destinations</id>
    <content type="html"><![CDATA[<p>Xcode 5になって<code>xcodebuild</code>コマンドも進化したらしいのですが、あまり変更を追えていませんでした。
今日、ぼんやりと<code>man xcodebuild</code>を眺めていたら<code>-destination</code>というオプションをみつけました。
これを使えば任意のiOSバージョンでテストを走らせられるなと思ってやってみました。</p>

<p>はじめはXCTestで実行したかったのですが、<code>iPhoneSimulator6.0.sdk</code>や<code>iPhoneSimulator5.0.sdk</code>には
<code>xctest</code>という実行ファイルが含まれていないため、以下のようなコマンドでテストを実行することができませんでした。
(OS=7.0だと実行できます。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>xcodebuild <span class="nb">test</span> -scheme Example -destination <span class="s2">&quot;name=iPhone,OS=6.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>OCUnitを実行する<code>ounit</code>という実行ファイルは<code>iPhoneSimulator6.0.sdk</code>や<code>iPhoneSimulator5.0.sdk</code>にも含まれているので、
仕方がなくOCUnitでセットアップしなおしました。
すると、同じコマンドでiOS 6のシミュレーターでのテストを実行できるようになりました。</p>

<p>ここまでできれば、あとは複数のdestinationに対して自動的に実行できるようにするだけです。
以下のようなRakefileを書いておくと<code>DESTINATIONS</code>に並べたすべてのdestinationでのテストが、
<code>rake</code>で実行できるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SCHEME</span> <span class="o">=</span> <span class="s2">&quot;Example&quot;</span>
</span><span class='line'><span class="no">DESTINATIONS</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;name=iPhone,OS=5.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone,OS=6.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (3.5-inch),OS=5.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (3.5-inch),OS=6.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (3.5-inch),OS=7.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (4-inch),OS=6.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (4-inch),OS=7.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (4-inch 64-bit),OS=7.0&quot;</span><span class="p">,</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:clean</span><span class="p">,</span> <span class="ss">:test</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;clean&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:clean</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s2">&quot;xcodebuild clean&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;run unit tests&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DESTINATIONS</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">destination</span><span class="o">|</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s2">&quot;xcodebuild test -scheme </span><span class="si">#{</span><span class="no">SCHEME</span><span class="si">}</span><span class="s2"> -destination </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">destination</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルのプロジェクトはGitHubに置いてあります。<br/>
<a href="https://github.com/ishkawa/RunTestsForAllDestinationsExample">ishkawa/RunTestsForAllDestinationsExample</a></p>

<p>Travis CIがXcode 5に対応するのが楽しみになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[main queueのNSManagedObjectContextの話]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/26/main-queue-context/"/>
    <updated>2013-09-26T02:25:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/26/main-queue-context</id>
    <content type="html"><![CDATA[<p>ふとTwitterで<a href="https://twitter.com/cockscomb/status/382914504637419520">@cockscomb</a>さんと<a href="https://twitter.com/k_katsumi">@k_katsumi</a>さんとCoreDataの話になって考えました。
これから書くことは正しさが曖昧なので、鵜呑みにしないように気をつけてください。
なお、マルチスレッドに関する話にはここでは触れません。</p>

<h3>前提</h3>

<p>CoreDataを使うときにNSManagedObjectContext, NSPersistentStoreCoordinator, NSManagedObjectModelを持つ、以下のようなsingletonを作ったことがあると思います。
こういう実装をすると確かに便利なんですが、共有されたNSManagedObjectContextが色んな所からアクセスされることになって、それをどうにかしたいなと思いました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreData/CoreData.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CDECoreDataManager</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">sharedManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>共有されたNSManagedObjectContextを避けたい理由</h3>

<p>UIViewControllerは基本的に他のUIViewControllerから独立していて、1つの画面のことだけを考えて実装すればいいと思います。
共有されたNSManagedObjectContextを避けたい理由は、このような状況を壊してしまうからです。
singletonを介しているので当然といえばその通りなんですが、そのことに気がついたときには少し驚きました。</p>

<p>例を1つ挙げます。
NSFetchedResultsControllerのデリゲートメソッドにはcontrollerDidChangeContent:というものがあります。
このメソッドはNSFetchedResultsControllerがNSManagedObjectContextの変更を検知したときに呼ばれるものです。
つまり、NSManagedObjectContextが共有されている場合、どこか1箇所でNSManagedObjectContextに変更を与えると、
生存しているすべてのNSFetchedResultControllerについてこのデリゲートメソッドが呼ばれてしまうのです。
controllerDidChangeContent:の中身が全箇所で一斉に走っても問題ないことが多いとは思いますが、
全箇所で意図していなかった何かが一斉に走るということはできるだけ避けたいと自分は考えました。</p>

<p>再現するサンプルコードも用意しました。
Push next view controllerというボタンを何度か押してから、+ボタンを押してみてください。
すると、すべてのNSFetchedResultsControllerについてデリゲートメソッドが呼ばれます。</p>

<p><a href="https://github.com/ishkawa/CoreDataExperiment">サンプルコード</a></p>

<h3>Appleが示す方法は？</h3>

<p>CoreData snippetsというドキュメントの<a href="https://developer.apple.com/library/mac/documentation/DataManagement/Conceptual/CoreDataSnippets/Articles/stack.html#//apple_ref/doc/uid/TP40008283-SW2">Accessing the Core Data Stack</a>によると、
CoreDataを利用するUIViewControllerにはNSManagedObjectContextのpropertyを用意して、既存のNSManagedObjectContextを渡す、
もしくは(そのUIViewControllerの編集が既存のものとは分離されている場合に)新たなNSManagedObjectContextつくりなさいとのことでした。
既存のものとして渡されるNSManagedObjectContextはApplication Delegateが作成して、最初のUIViewControllerに渡すべきだそうです。</p>

<p>つまり、Appleは共有されたNSManagedObjectContextを利用すべきと言うと同時に、編集が分離されている場合は新しいのNSManagedObjectContextもつくっていいとも言っています。
これらに加えて以下のようにも言っています。</p>

<ul>
<li>Application DelegateのようなグローバルなオブジェクトからNSManagedObjectContextを取得するべきではない</li>
<li>各UIViewController自身のためだけのNSManagedObjectContextをつくるべきではない</li>
</ul>


<p>そうなると、どちらも行き過ぎてはよくないということなんでしょうか。何がよりよいのかわからなくなってきます。</p>

<h3>実際みんなどうやってるの？</h3>

<p>はじめに書いた方法のような感じで、main queueのNSManagedObjectContextは1つでやっているようです。
自分もこの方法でやっていましたが、先に紹介した理由もあってモヤモヤしています。</p>

<h3>UIViewController毎にNSManagedObjectContextをつくるべきではない理由は？</h3>

<p>意見募集中です。Twitterやメールなどで教えていただけると幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2013に参加してきました]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/22/yapc/"/>
    <updated>2013-09-22T17:15:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/22/yapc</id>
    <content type="html"><![CDATA[<p>Perlの人じゃなくても楽しいと聞いて参加してきました。</p>

<p>Perlの世界で活躍する人たちの長めのトークを聞けるだけでもありがたいことですが、
その後は個人的に話を聞きに行ったりできる雰囲気になっていてすごく良いなと思いました。
会場の広場やバーでは似たような関心を持った人たちが議論していてうらやましかったのですが、
こういうのは数日間開催されているからこそできることなんだなと思いました。</p>

<p>iOS界隈でもこういうのがあったらいいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5でテストを分割実行する]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/19/xcode-5-test/"/>
    <updated>2013-09-19T11:40:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/19/xcode-5-test</id>
    <content type="html"><![CDATA[<p>command + option + control + U で実行できます。</p>

<p>テストコードのファイルを開いているときに、テストケース内にカーソルを置いているとそのテストケースのみ実行され、
テストケース外にカーソルを置いているとそのファイルのテストがすべて実行されます。</p>

<p>SenTestingKit, XCTestのみで動作を確認しました。
いまのところのKiwiはまだこの機能に対応していなくて、個別の単位(<code>describe</code>, <code>context</code>, <code>it</code>など)での実行はできません。
未確認ですが、GHUnitは仕組みから考えると全く対応していないと思います。</p>

<p>分割実行できるようになると気軽にテストを走らせるようになって、テストが捗ります。<br/>
SenTestingKitベースになったKIFも分割実行できるので、UIテストも捗りますね。</p>

<h3>追記 (2013/9/20)</h3>

<p>今日リリースされたKiwi 2.2.2でファイル単位の個別の実行ができるようになったみたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HHK無刻印モデルを3週間使った感想]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/15/hhk/"/>
    <updated>2013-09-15T10:51:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/15/hhk</id>
    <content type="html"><![CDATA[<p>最近<a href="http://www.pfu.fujitsu.com/hhkeyboard/lineup/pdkb400bn.html">HHK Pro 2の無刻印モデル</a>を使い始めました。<br/>
<a href="http://twitter.com/soh335">斜に構えおじさん</a>に中2とか言われてバカにされたりしました。</p>

<blockquote class="twitter-tweet"><p>無刻印 メリット 何</p>&mdash; soh335 (@soh335) <a href="https://twitter.com/soh335/statuses/371610150659825664">August 25, 2013</a></blockquote>


<script async src="http://blog.ishkawa.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>　</p>

<p>3週間くらい使って結構慣れてきたので感想を書きます。</p>

<ul>
<li>意外とタッチタイピングができていなかったことに気づいた</li>
<li>タッチタイピングができるようになって視線の移動がかなり減った</li>
<li>キーを入れ替えるのに抵抗がなくなった</li>
<li>ｯﾀｰﾝってやるの最高に気持ちいい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[次世代のKIF(2.0.0)が良さそう]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/08/31/kif-next/"/>
    <updated>2013-08-31T19:51:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/08/31/kif-next</id>
    <content type="html"><![CDATA[<p>KIFはSquare製のIntegration Testsのためのフレームワークです。
この半年くらいでKIFは大幅なアップデートに取り組んでいるらしく、現在はプレリリース版の2.0.0pre5が公開されています。
まだ正式版はリリースされていないのですが、ひとまずプレリリース版を動かしてみました。</p>

<p><a href="https://github.com/kif-framework/KIF/tree/kif-next">KIF(kif-next)</a></p>

<p>　</p>

<p>KIFは元々GHUnitのようにアプリのビルドターゲットを複製し、エントリーポイントを少し変更することで複製したアプリ上でテストを走らせるというものでした。
新しいバージョンではSenTestingKitを利用することでXcodeに統合されたテストとして実行できるようになりました。
具体的には以下のようなメリットがあります。</p>

<ul>
<li>command+Uで実行できる</li>
<li>エラーが出た箇所を追跡しやすい</li>
<li>部分実行ができる</li>
<li>xUnit/xSpec形式でテストを書ける</li>
</ul>


<p>SenTestingKitを利用している他のフレームワーク(Spectaとか)も利用できるようです。</p>

<p>以下は実機上で動かしている様子です。</p>

<iframe class="embed-preview" src="http://blog.ishkawa.org//gifboom.com/x/a8a13526/embed_content" width="600" height="600" frameborder="0" scrolling="no"></iframe>


<script async src="http://blog.ishkawa.org//medias.gifboom.com/static/embed.1.js" charset="utf-8"></script>


<p>一応、サンプルコードをGitHubに置いておきます。</p>

<p><a href="https://github.com/ishkawa/KIFNextExample">KIFNextExample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS開発でのユニットテストを身につけるには]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/08/31/unit-test/"/>
    <updated>2013-08-31T01:39:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/08/31/unit-test</id>
    <content type="html"><![CDATA[<p>テストがないコードはクソとか、このテストツールこそ至高みたいな話が世に溢れているわけですが、
そういう状況になってくると、どうやって始めたらいいのかわからなかったりすると思います。
そういう人のために、何を読んで勉強し、何を使って何を書くと始めやすいかという抽象的な解説をしようと思います。</p>

<h3>テストフレームワークの選択</h3>

<p>テスト初心者の最初の壁はフレームワークの選択です。
iOSのテストについて調べると、SenTestingKitはクソとかGHUnit最高とかKiwiこそ至高とか言っている人がいると思います。
ですが、入門に最も適しているのはSenTestingKitです。
セットアップが他と比べて簡単だということと、機能が十分に小さくて機能に溺れることがないということが理由です。</p>

<h3>SenTestingKitの使い方を学ぶ</h3>

<p>いきなり突き放すようなんですが、Appleの公式のドキュメントを読むのがいいと思います。
プロジェクトのセットアップ方法が詳細に説明されているので、途方に暮れることもないと思います。
おそらく、初めて読んだ時点ではロジックテストとアプリケーションテストの違いがよくわからないと思いますが、
ひとまずアプリに対するテストはアプリケーションテストとしてセットアップするのが良いと思います。
理由はUIApplicationやNSBundleの扱い方がプロダクトコードと揃うからです。</p>

<p><a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/UnitTesting.pdf">Xcode ユニットテスト ガイド (公式ドキュメント)</a></p>

<h3>テストの対象を決める</h3>

<p>iOSアプリのテストは書きづらいと言われることがありますが、ほとんどのコードに対するテストを書くことは可能です。
ですが、テストを書くコストに見合った分だけの利益がないと、テストを書き続けるモチベーションは下がると思いますので、
初めは恩恵を受けやすいモデルのテストのみを書くことを勧めます。
UIViewControllerのテストを書くことも出来ますが、
初めは完璧を目指すよりも無理のない範囲で安定した粒度のテストを書くことの方が大切です。</p>

<h3>サンプルコードを動かす</h3>

<p>続いてすべきことは、Appleが提供しているサンプルコードを動かすことだと思います。
このサンプルコードから学ぶべきことは、モデルに対するテストケースの書き方です。
<code>CalculatorLogicTests.m</code>を読むとモデルに対してどのようにテストを書けばいいか分かるはずです。
(<code>iOS_CalcTests.m</code>にはUIViewControllerに対するテストが書かれているのですが、前節でやらないことにしたので省きます。)</p>

<p><a href="https://developer.apple.com/library/mac/samplecode/UnitTests/Introduction/Intro.html">Unit Testing Apps and Frameworks (サンプルコード)</a></p>

<p>実行するにはXcodeのスキームを以下のようにして、command+Uを押します。</p>

<p><img src="http://blog.ishkawa.org/images/2013-08-31/scheme.png"></p>

<p>ここまで実行すれば、テストをセットアップして、テストコードを書き、テストを実行する方法がわかると思います。
あとは自分のプロジェクトでこれらの手順を実行すれば、iOSテストに入門できたといえると思います。</p>

<h3>他のテストツールについて</h3>

<p>ひと通り実行してみると、SenTestingKitについて以下の点に気がつくと思います。</p>

<ul>
<li>非同期の処理が完了する前にテストケースが終わってしまう</li>
<li>このメソッドを呼んだらこのメソッドが呼ばれるというテストができない</li>
<li>テストしたい条件を作ることが難しい</li>
</ul>


<p>1番目の非同期の問題はNSRunLoopを回して待つことで解決可能ですが、
Kiwiなどのフレームワークレベルで解決しているものを利用するという手もあります。
そもそもモデルの層で非同期の処理が入っているコードはテストしづらいコードだという説もあります。</p>

<p>2,3番目の問題はモック/スタブを提供するライブラリを導入することで解決できます。
OCMockなどのモック/スタブ単品のライブラリもあれば、Kiwiのようにフレームワークの一部として提供しているものもあります。</p>

<p>必要に応じてこういった外部のライブラリを導入するとテストが楽になるので、
なんかテストが書きづらいなあと思ったときは、それを上手く解決しているライブラリを探すといいと思います。</p>

<h3>SenTestingKitに対するよくある誤解</h3>

<p>SenTestingKitは誤解されやすいので、SenTestingKitに対するよくある誤解を並べておきます。</p>

<ul>
<li>非同期処理を含むテストを実行できない &ndash;> NSRunLoopを回して完了を待つことはできる</li>
<li>実機上でテストを実行できない &ndash;> アプリケーションテストは実機でも実行できる</li>
<li>ターミナルからテストを実行できない &ndash;> xcodebuildコマンドで実行可能</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GHFeedで利用しているライブラリ一覧]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/08/28/ghfeed-libraries/"/>
    <updated>2013-08-28T08:18:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/08/28/ghfeed-libraries</id>
    <content type="html"><![CDATA[<p>先日GHFeedというGitHubのフィードを読めるiOSアプリをリリースしました。<br/>
今日はGHFeedの開発に利用したライブラリを紹介しようと思います。</p>

<h4>NJKWebViewProgress</h4>

<p>UIWebViewの読み込み状況を取得してくれるライブラリです。
作者は<a href="https://twitter.com/ninjinkun">@ninjinkun</a>さんです。
このライブラリが出してくれる値は大体0.0, 0.1, 1.0なので、
GHFeedではこれらの値を補間するようなアニメーションを追加で実装しています。</p>

<h4>KLSwitch</h4>

<p>フラットデザインなUIButtonのライブラリです。<br/>
UIAppearanceにも対応するなど、結構細かいところまで実装が行き届いていました。</p>

<h4>TUSafariActivity</h4>

<p>UIActivityViewControllerにOpen in Safariを追加するライブラリです。</p>

<h4>SSKeychain</h4>

<p>キーチェーンのwrapperです。</p>

<h4>SVProgressHUD</h4>

<p>ユーザーに待ってもらいたいときに表示するUIViewです。</p>

<h4>ISHTTPOperation</h4>

<p>NSURLConnectionをwrapしたNSOperationです。
実際には直接ISHTTPOperationを使うのではなく、JSONパースまで含んだサブクラスや、
画像のディスクキャッシュへの保存/読込を追加したサブクラスを利用しています。</p>

<h4>ISDiskCache</h4>

<p>ディスクキャッシュです。画像と通知APIのレスポンスのキャッシュに利用しています。</p>

<h4>ISMemoryCache</h4>

<p>メモリキャッシュです。画像のキャッシュにのみ利用しています。</p>

<h4>ISRemoveNull</h4>

<p>GitHub APIのレスポンスからNSNullを外すのに利用しています。</p>

<p>　</p>

<h3>テストのライブラリ</h3>

<p>SenTestingKitを利用しています。</p>

<h4>OHHTTPStubs</h4>

<p>スタブサーバーです。通信を含む処理をテストできます。</p>

<h4>OCMock</h4>

<p>スタブ/モックを提供してくれるライブラリです。</p>

<h4>OCMockObject+Lazy</h4>

<p>OCMockのverifyを非同期のAPIに対しても実行できるようにする拡張です。
NSRunLoopを回しながらverifyを反復して実行するというアレ気味な実装になっているので、
もう少しマシなものを考えたいものです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モバイル版のGitHubにフィードがなかったので、補うiOSアプリをつくってリリースした]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/08/27/ghfeed/"/>
    <updated>2013-08-27T00:30:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/08/27/ghfeed</id>
    <content type="html"><![CDATA[<p>プッシュ通知などもついていて、なかなか便利なものになりました。</p>

<p><a href="https://itunes.apple.com/jp/app/ghfeed/id683793545">アプリをダウンロード</a></p>

<p>　</p>

<p><img src="http://blog.ishkawa.org/images/2013-08-27/feed.png">　<img src="http://blog.ishkawa.org/images/2013-08-27/page.png"></p>

<p>　</p>

<p>GitHubのモバイル版(Web)はかなり良くできていて流石だなあと思っていたのですが、
肝心のフィードがなかったりして、モバイル版の役割を十分にカバーできていないと思いました。
それを補うのがGHFeedです。具体的には以下の2つの機能を提供しています。</p>

<ul>
<li>フィードの表示</li>
<li>ハイライトされるイベントをプッシュ通知</li>
</ul>


<p>前者はpull型の利用で、時間があるときにフィードを見て面白そうなリポジトリがあればスターをつけたりしておく、というような利用を想定しています。
後者はpush型で、自分が関わるリポジトリにイベントがあった時に早く気づけるようにするという利用を想定しています。
自分はこの2つの利用パターンが可能になって、はじめてモバイル版のGitHubが成り立つんじゃないかなあと思い、開発にいたりました。
振り返ってみると、こういった用途はネイティブアプリの方が向いているので、ちょうど良かったのかもしれません。</p>

<p>アプリは無料で広告もありませんが、設定画面にビールボタンがあるので、
アプリを応援してくださる方は是非このボタンを押してみてください。よろしくお願いいたします。</p>

<p>　</p>

<p><img src="http://blog.ishkawa.org/images/2013-08-27/beer.png"></p>

<p>　</p>

<p>デザインは<a href="https://twitter.com/more_more_for">@more_more_for</a>くんに担当してもらいました。
彼は前職の同期で、優秀で多忙な人なのですが、仕事の合間を縫って手伝ってもらいました。
前職の時には一緒に仕事をする機会がなかったのですが、今回一緒にアプリをつくることができてうれしかったです。</p>

<p>　</p>

<p><a href="https://itunes.apple.com/jp/app/ghfeed/id683793545">アプリをダウンロード</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年の@synthesize]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/08/17/synthesize-in-2013/"/>
    <updated>2013-08-17T15:20:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/08/17/synthesize-in-2013</id>
    <content type="html"><![CDATA[<p>Xcode 4.4でApple LLVM Compiler 4.0が採用されてから、いわゆるModern Objective-Cの一環として
<code>@synthesize</code>を書かなくても<code>@synthesize foo = _foo;</code>を書いたときと同等の実装が暗黙的に行われるようになりました。
この仕様が追加されたモダンなプロジェクトでは2度と<code>@synthesize</code>は書かれないのかというと、そうではなくて、
以下のようなコードを書く場合に<code>@synthesize</code>を使うことがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">FOOViewController</span> : <span class="nc">UITableViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="n">fetchedResultsController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FOOViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">fetchedResultsController</span> <span class="o">=</span> <span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="nf">fetchedResultsController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_fetchedResultsController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithConcurrencyType:</span><span class="n">NSMainQueueConcurrencyType</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSFetchRequest</span> <span class="o">*</span><span class="n">reqeust</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName:</span><span class="s">@&quot;Foo&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">reqeust</span><span class="p">.</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="err">@</span><span class="p">[[</span><span class="n">NSSortDescriptor</span> <span class="nl">sortDescriptorWithKey:</span><span class="s">@&quot;bar&quot;</span> <span class="nl">ascending:</span><span class="n">YES</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">_fetchedResultsController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFetchedResultsController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFetchRequest:</span><span class="n">reqeust</span>
</span><span class='line'>                                                                    <span class="nl">managedObjectContext:</span><span class="n">context</span>
</span><span class='line'>                                                                      <span class="nl">sectionNameKeyPath:</span><span class="nb">nil</span>
</span><span class='line'>                                                                               <span class="nl">cacheName:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@synthesize fetchedResultsController = _fetchedResultsController;</code>が必要な理由は、
getterの実装を独自に行なっているのでインスタンス変数<code>_fetchedResultsController</code>が宣言されないからです。
インスタンス変数を宣言するためだけに<code>@synthesize</code>を使うのが気持ち悪い場合には以下のように書くこともでき、
<code>@synthesize</code>とは永遠の別れを告げることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">FOOViewController</span> : <span class="nc">UITableViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="n">fetchedResultsController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FOOViewController</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="n">fetchedResultsController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_fetchedResultsController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithConcurrencyType:</span><span class="n">NSMainQueueConcurrencyType</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSFetchRequest</span> <span class="o">*</span><span class="n">reqeust</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName:</span><span class="s">@&quot;Foo&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">reqeust</span><span class="p">.</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="err">@</span><span class="p">[[</span><span class="n">NSSortDescriptor</span> <span class="nl">sortDescriptorWithKey:</span><span class="s">@&quot;bar&quot;</span> <span class="nl">ascending:</span><span class="n">YES</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">_fetchedResultsController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFetchedResultsController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFetchRequest:</span><span class="n">reqeust</span>
</span><span class='line'>                                                                    <span class="nl">managedObjectContext:</span><span class="n">context</span>
</span><span class='line'>                                                                      <span class="nl">sectionNameKeyPath:</span><span class="nb">nil</span>
</span><span class='line'>                                                                               <span class="nl">cacheName:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで書き終えてから思い出しましたが、NSManagedObjectのentityにないプロパティをつくるときにも<code>@synthesize</code>が必要でした。
もう書く気力がないのでそれはまた別の機会に。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISHTTPOperation 1.1.0をリリースした]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/08/07/ishttpoperation/"/>
    <updated>2013-08-07T11:02:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/08/07/ishttpoperation</id>
    <content type="html"><![CDATA[<p>朝6時に目が覚めたら意識が高かったので、ISHTTPOperationに欲しかった機能をつけてリリースしました。<br/>
<a href="https://github.com/ishkawa/ISHTTPOperation">ISHTTPOperation</a></p>

<p>　</p>

<p>ISHTTPOperationは特徴のあるライブラリではなくて、単純に非同期のNSURLConnectionをラップするNSOperationです。
こういったライブラリはたくさんあって、いわゆる車輪の再発明なのですが、わざわざ自分で作っているのには理由があります。
理由の1つは多くの通信ライブラリは機能が多すぎるため、大量の不要なコードをプロジェクトに導入することになってしまうからです。
もう1つはNSURLConnectionをNSOperationで正しくラップするときにはミスしやすい箇所が多いので、
シンプルなライブラリであってもキャンセルなどの目立ちにくい動作に不具合を出しやすいからです。</p>

<h3>かわったところ</h3>

<ul>
<li>テストにスタブサーバーを利用する</li>
<li>Travis CIとCoverallsを利用して品質(?)を表示</li>
<li>NSPredicateを利用してキャンセル</li>
</ul>


<p>元々、3つ目のキャンセル機構をつけたかったのですが、
最近は<a href="http://www.tokoro.me/2013/07/09/objc-travis-coveralls/">iOSのライブラリだってTravis CIとかCoverallsとか使うべき</a>という話だったので、
その辺りにも手を入れてみたらテストがださかったのでテストも直したという感じです。
それと、せっかくここまでやったんだからと思ってCocoaPodsにもpull requestを送っておきました。</p>

<p>NSPredicateでキャンセルというのは以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;request.HTTPMethod MATCHES %@&quot;</span><span class="p">,</span> <span class="s">@&quot;GET&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">ISHTTPOperationQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">cancelOperationsUsingPredicate:</span><span class="n">predicate</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>よく使いそうなやつには以下のようなショートカットも用意しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">[[</span><span class="n">ISHTTPOperationQueue</span> <span class="n">defaultQueue</span><span class="p">]</span> <span class="nl">cancelOperationsWithHTTPMethod:</span><span class="s">@&quot;GET&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCMArgをBlocksとして渡すときに困ること]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/07/15/ocmarg-block/"/>
    <updated>2013-07-15T01:42:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/07/15/ocmarg-block</id>
    <content type="html"><![CDATA[<p>iOSの標準フレームワークでは至るところにBlocksが登場します。
引数として渡されるBlocks自体に制限を設けたテストを書くことはあまりないので
<code>[OCMArg any]</code>を指定しようと考えるのですが、Blocksは内部的にcopyして扱われることが多いらしく、
以下のようなテストを書くとOCMConstraintをcopyしようとしたところで例外が発生します。
OCMConstraintがNSCopyingに適合していないので当然のことですが、ちょっと困ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSomeMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">mock</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">partialMockForObject:</span><span class="n">viewController</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">mock</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">NO</span> <span class="nl">completion:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="n">any</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 何かする</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">STAssertNoThrow</span><span class="p">([</span><span class="n">mock</span> <span class="n">verify</span><span class="p">],</span> <span class="s">@&quot;did not dismiss.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>めんどくさいので自分は以下のようなコードをOCMConstraintのカテゴリに書いて問題を回避しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストコードとは言えどもこういった雑なことばっかりしてるといつか痛い目に遭いそうだと思ったので、
より良い方法があれば聞きたいところです。</p>

<h3>追記</h3>

<p>OCMock 2.2では同様の実装がされていると、<a href="https://twitter.com/azu_re/">@azu_re</a>さんに教えていただきました。<br/>
2.2以降を利用すれば上記のメソッドを実装しなくてもcopyの問題は起こりません。</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/_ishkawa">@_ishkawa</a> OCMock 2.2だとcopyWithZone: 実装されてるように見えるけど、これとは別? <a href="https://t.co/lDzgB5tMSb">https://t.co/lDzgB5tMSb</a> <a href="https://t.co/w11Yr14Um9">https://t.co/w11Yr14Um9</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/statuses/356620135156551681">July 15, 2013</a></blockquote>


<script async src="http://blog.ishkawa.org//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コードカバレッジを計測してみた感想]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/07/08/code-coverage/"/>
    <updated>2013-07-08T20:52:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/07/08/code-coverage</id>
    <content type="html"><![CDATA[<p>先週末、およそ3ヶ月ぶりにNode.jsのコードを書きました。</p>

<p>いつの間にかテストをそれほど苦労せずに書けるようになっていて、
たくさんテストを書いて意識が高まり、コードカバレッジを計測しようと思いました。
コードカバレッジを計測するのは今回が生まれて初めてでした。
何処かで&#8221;コードカバレッジは目安に過ぎない&#8221;みたいな話を聞いて、
コードカバレッジの効果に対しては半信半疑なところがありましたが、
とにかくそのときは意識が高まっていたので頑張って計測できるようにしました。
参考にしたのは以下のブログ記事です。
あまり深いことはわからないのですが、jscoverageが実行回数を測定できるプロダクトコードのコピーを生成し、
テストコードからそれを実行することでコードカバレッジを計測できるという感じの仕組みのようです。</p>

<p><a href="http://www.seejohncode.com/2012/03/13/setting-up-mocha-jscoverage/">http://www.seejohncode.com/2012/03/13/setting-up-mocha-jscoverage/</a></p>

<h4>感想</h4>

<p>&ldquo;コードカバレッジは目安に過ぎない&#8221;というのは、コードカバレッジを計測した経験がある人とない人とでは捉え方が変わると思いました。
コードカバレッジを計測してみる前は&#8221;目安に過ぎないから計測してもしなくても大差ない&#8221;というような気がしていたのですが、
計測してその結果を活用して開発をしてみると&#8221;無意味な変更でパーセンテージが変化する場合があるから目安&#8221;なのかなと思いました。
で、結局目安と言いながらも明らかにカバーできていない箇所を発見できたりして開発にとても役立つので、
本業のiOS開発の方でも頑張ってやってみようと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISDiskCacheというのを書いた]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/07/01/isdiskcache/"/>
    <updated>2013-07-01T03:41:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/07/01/isdiskcache</id>
    <content type="html"><![CDATA[<p>2ヶ月ほど前に<a href="http://blog.ishkawa.org/blog/2013/04/24/ismemorycache/">ISMemoryCacheというのを書いた</a>のですが、
実はこれと並行してISDiskCacheというのもつくっていました。
しかし、良いアイディアが浮かばなくて完成度が十分に上がらず、リリースできないまま放置していました。
先週末にちょうど<a href="https://objectivechackathon.appspot.com">Put Objective-C Back On the Map</a>というWeb上のイベントがあったので、
それに参加することをモチベーションにISDiskCacheの実装に再挑戦しました。</p>

<p><a href="https://github.com/ishkawa/ISDiskCache">ISDiskCache</a></p>

<h3>特徴</h3>

<ul>
<li>合計のファイルサイズの上限を持ち、上限を超えたら古いファイルを自動的に削除(LRU)。</li>
<li>NSCodingに適合するオブジェクトをキー/値に設定できる。</li>
<li>NSDateを指定してアクセス日時が古いファイルを削除できる。</li>
</ul>


<p>類似のライブラリにはtumblrがつくっている<a href="https://github.com/tumblr/TMCache">TMCache</a>があります。
TMCacheとISMemoryCache/ISDiskCacheの違いは説明するが大変なので、お互いにないものを挙げていきます。</p>

<ul>
<li>実績がある: TMCache</li>
<li>メモリキャッシュ/ディスクキャッシュを意識せずに使える: TMCache</li>
<li>参照がある限りキャッシュをクリアしない: ISMemoryCache/ISDiskCache</li>
<li>NSString以外をキーにできる: ISMemoryCache/ISDiskCache</li>
</ul>


<p>メモリキャッシュ/ディスクキャッシュを意識させないつくりが必要かどうかは少し疑問に思いました。
確かに同じAPIで利用できるのは手軽で便利なのですが、メモリキャッシュはメインスレッドでも同期的に扱うことができるのに、
メモリキャッシュかディスクキャッシュかわからなくなってしまうと非同期的に処理するしかなくなってしまいます。</p>

<p>自分は同期的にかける箇所は同期的に書きたかったので、メモリキャッシュとディスクキャッシュを分けることにしました。
キャッシュを分けると利用側のコードが増えてしまうのですが、ディスクキャッシュへのアクセスとサーバーとの通信を1つのNSOperationにまとめてしまえば、
以下のように同期的な処理と非同期的な処理の2通りを書けば済んでしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">cachedImage</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ISMemoryCache</span> <span class="n">sharedCache</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="n">URL</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">cachedImage</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">cachedImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;placeholder&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">ISImageLoaderOperation</span> <span class="nl">loadURL:</span><span class="n">URL</span> <span class="nl">handler:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
