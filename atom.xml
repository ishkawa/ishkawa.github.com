<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.ishkawa.org]]></title>
  <link href="http://blog.ishkawa.org/atom.xml" rel="self"/>
  <link href="http://blog.ishkawa.org/"/>
  <updated>2014-05-01T01:02:08+09:00</updated>
  <id>http://blog.ishkawa.org/</id>
  <author>
    <name><![CDATA[ishkawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[すべてのテストケースの前後にあれこれする]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/04/30/pre-post-test-case/"/>
    <updated>2014-04-30T13:25:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/04/30/pre-post-test-case</id>
    <content type="html"><![CDATA[<p>iOSのアプリケーションテストを書いていると、各テストケースの前後に永続ストアやスタブサーバーなどをリセットしたくなることがあると思います。
リセットが必要なテストスイートのsetUp/tearDownに書いても良いのですが、書くのが面倒だったり書き忘れてしまうこともあるので、
すべてのテストケースについてリセットが走るようにしておいた方が心を穏やかにすることができると思います。</p>

<h3>実現方法</h3>

<p>すぐに思いついたのは以下のような方法です。</p>

<ul>
<li>setUp/tearDownにリセット処理を加えたサブクラスを継承させる</li>
<li>XCTestCaseのsetUp/tearDownをswizzleする</li>
</ul>


<p>サブクラスを継承させる方法には、KIFTestCaseなど他のライブラリのクラスには適用ができないという問題があります。
method swizzlingを利用する方法は、他のmethod swizzlingと衝突する可能性があるのでなるべく避けたいものです。</p>

<p>そこで、着目したのがXCTestObserverです。
XCTestObserverは以下のようなイベントが発生したときに対応したメソッドを実行します。</p>

<ul>
<li>テストの開始/終了</li>
<li>テストスイートの開始/終了</li>
<li>テストケースの開始/終了</li>
</ul>


<p>これらのイベントを受け取るには予めNSUserDefaultsのXCTestObserverClassKeyというキーにクラス名を設定しておく必要があります。
具体的には、以下のようなクラスを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@implementation</span> <span class="nc">ISTestObserver</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span><span class="s">@&quot;XCTestLog,ISTestObserver&quot;</span> <span class="nl">forKey:</span><span class="n">XCTestObserverClassKey</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testCaseDidStart:</span><span class="p">(</span><span class="n">XCTestRun</span> <span class="o">*</span><span class="p">)</span><span class="nv">testRun</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// reset</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testCaseDidStop:</span><span class="p">(</span><span class="n">XCTestRun</span> <span class="o">*</span><span class="p">)</span><span class="nv">testRun</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// reset</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>リセット処理の例</h3>

<p>自分が利用している例を紹介します。</p>

<h4>NSUserDefaultsのリセット</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeStandardUserDefaultsPersistentDomain</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">bundleIndetifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">].</span><span class="n">bundleIdentifier</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">userDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">userDefaults</span> <span class="nl">removePersistentDomainForName:</span><span class="n">bundleIndetifier</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>NSHTTPCookieStorageのリセット</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeAllCookies</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSHTTPCookieStorage</span> <span class="o">*</span><span class="n">cookieStrage</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSHTTPCookieStorage</span> <span class="n">sharedHTTPCookieStorage</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">cookie</span> <span class="k">in</span> <span class="p">[</span><span class="n">cookieStrage</span> <span class="n">cookies</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">cookieStrage</span> <span class="nl">deleteCookie:</span><span class="n">cookie</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>OHHTTPStubsのリセットと汎用スタブ</h4>

<p>汎用スタブはテスト実行中に誤って外のURLを読みに行かないようにするためにtestCaseDidStart:で用意しています。
testCaseDidStart:はsetUpよりも先に実行されるので、setUpで他のスタブを追加した場合にはそちらが優先されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stubGeneralRequest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span> <span class="o">*</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="s">@&quot;Dummy&quot;</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithData:</span><span class="n">data</span>
</span><span class='line'>                                          <span class="nl">statusCode:</span><span class="mi">200</span>
</span><span class='line'>                                             <span class="nl">headers:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeAllStubs</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="n">removeAllStubs</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OHHTTPStubsの優先順位についてはREADMEに次のように書かれています。</p>

<blockquote><p>When a network request is performed by the system, the stubs are called in the reverse order that they have been added, the last added stub having priority over the first added ones. The first stub that returns YES for the first parameter of stubRequestsPassingTest:withStubResponse: is then used to reply to the request.</p></blockquote>

<h4>CoreDataの永続ストアの削除</h4>

<p><a href="https://github.com/ishkawa/ISPersistentStack">ISPersistentStack</a>を利用しています。
deleteCurrentStoreの実装については<a href="https://github.com/ishkawa/ISPersistentStack/blob/master/ISPersistentStack/ISPersistentStack.m">ソース</a>を参照してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dropDatabase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">ISPersistentStack</span> <span class="n">sharedStack</span><span class="p">]</span> <span class="n">deleteCurrentStore</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[位置情報でリモコンを操作するiOSアプリをリリースしました]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/04/28/geo-ir/"/>
    <updated>2014-04-28T21:27:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/04/28/geo-ir</id>
    <content type="html"><![CDATA[<p><img src="http://blog.ishkawa.org/images/2014-04-28/icon.png"></p>

<p><a href="https://itunes.apple.com/jp/app/geo-ir/id856152824">Geo IR</a></p>

<p>Geo IRという名前でリリースしました。例えば、以下のような用途に利用できます。</p>

<ul>
<li>最寄り駅についたらでエアコンをつける</li>
<li>自宅に近づいたら照明を点灯させる</li>
<li>自宅から離れたら様々な電子機器の電源を落とす</li>
</ul>


<p>特に1つ目の用途は便利で、冬には家に着く頃には部屋が暖まった状態にすることができますし、夏には冷えた状態にすることが出来ます。</p>

<h3>利用できる位置情報</h3>

<p><img src="http://blog.ishkawa.org/images/2014-04-28/trigger.png"></p>

<p>アプリを反応させるイベントには以下の2つを指定できます。</p>

<ul>
<li>ターゲットエリア: 指定地点から半径nメートル</li>
<li>トリガー: ターゲットエリアへの進入時または退出時</li>
</ul>


<p>これらの情報を組み合わせて、&#8221;最寄り駅に付いた&#8221;や&#8221;自宅から離れた&#8221;といったイベントを定義します。</p>

<h3>利用できるリモコン信号</h3>

<p>基本的にはどのようなリモコンも利用することができます。</p>

<h3>その他必要なもの</h3>

<p>Geo IRの利用にはIRKitが必要です。IRKitはAmazonで購入することができます。</p>

<p><a href="http://www.amazon.co.jp/dp/B00H91KK26">Amazon.co.jp: IRKit &ndash; iPhone,iPadを使って外出先からエアコン等の家電を操作できる学習リモコン</a></p>

<h3>使い方</h3>

<h4>1. IRKitのセットアップ</h4>

<p>起動後に表示される指示に従ってください。<br/>
セットアップが上手くいかない場合は、アプリの再起動とIRKitのリセットをして上で再度試してみてください。</p>

<h4>2. リモコン信号のセットアップ</h4>

<p>設定画面からリモコン信号画面に移り、+ボタンを押してください。<br/>
以下のような画面が表示されたら、IRKitに向けてリモコン信号を送ってください。</p>

<p><img src="http://blog.ishkawa.org/images/2014-04-28/signal.png"></p>

<h4>3. 位置情報のセットアップ</h4>

<p>ターゲットエリアとトリガーを指定してください。</p>

<p><img src="http://blog.ishkawa.org/images/2014-04-28/region.png"></p>

<h4>4. 移動する</h4>

<p>指定したエリアに移動してみてください。リモコン信号の送信が成功すると(失敗すると)アプリに通知が届きます。</p>

<p><img src="http://blog.ishkawa.org/images/2014-04-28/notification.png"></p>

<h4>5. 動作を確認する</h4>

<p>履歴画面から確認できます。送信に失敗してしまった場合には、再送信することも出来ます。</p>

<p><img src="http://blog.ishkawa.org/images/2014-04-28/history.png"></p>

<h3>その他</h3>

<p>Geo IRには広告を非表示にするオプションが有るのですが、In App Purchaseのproduct登録をうっかり忘れてしまったので1.0.0では利用できません。
このオプションの利用を希望する方は、1.0.1がリリースされるまでお待ちください。</p>

<p>アプリのダウンロードは以下のリンクからどうぞ。</p>

<p><a href="https://itunes.apple.com/jp/app/geo-ir/id856152824">Geo IR</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS開発とGitタグ]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/04/20/ios-git-tag/"/>
    <updated>2014-04-20T14:18:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/04/20/ios-git-tag</id>
    <content type="html"><![CDATA[<p>いままでAppleにアプリを申請するタイミングでタグを打っていて、
その後にリジェクトされると以下のようなタグが残ることがありました。
非常にダサいですね。</p>

<ul>
<li>1.0.0</li>
<li>1.0.0-2</li>
<li>1.0.0-3</li>
</ul>


<p>最近は少し学習して、QAに入る段階でrelease/1.0.0といったブランチを切るようにしました。
審査に出した段階ではまだタグは打たず、もしもリジェクトされた場合は引き続きrelease/1.0.0を更新します。
審査を通過した場合はそこでタグを打って、release/1.0.0をmasterにマージします。
以下の図のようなイメージです。</p>

<p><img src="http://blog.ishkawa.org/images/2014-04-20/git-tag.png"></p>

<p>このように運用することで、余計なタグが打たれることはありませんし、審査中のバージョンを見失うこともありません。
もしかしたら普通のiOSデベロッパーは当たり前のように実践していることなのかもしれませんが、
自分は最近までダサいタグを打ったり、タグを打ち直したりしてたので書きました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISMemoryCache 0.1.0]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/04/13/ismemorycache-0-dot-1-0/"/>
    <updated>2014-04-13T20:56:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/04/13/ismemorycache-0-dot-1-0</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org/?q=cache">世の中にはたくさんキャッシュの実装があり</a>、
<a href="https://speakerdeck.com/ninjinkun/sdwebimagewo1nian-ban-shi-tutemita">自前の実装は捨てろ</a>なんて言われたりするのですが、
それでも自分の思い通りのキャッシュ機構を作りたくなるものだと思います。
自分はlimitに達したときにすべてのオブジェクトを削除するようなメモリキャッシュではなく、
他からの参照がないオブジェクトを選択して削除するようなメモリキャッシュが欲しかったのでISMemoryCacheを実装しました。
最近、ISMemoryCacheを更新して0.1.0を出したので、その機能を紹介します。</p>

<ul>
<li>アプリがバックグラウンドに入ったときに他からの参照がないオブジェクトを削除</li>
<li>メモリ警告が出たときにすべてのオブジェクトを削除</li>
</ul>


<p>ディスクキャッシュについてはISDiskCacheというのもあるので、そちらをどうぞ。</p>

<ul>
<li><a href="https://github.com/ishkawa/ISMemoryCache">ISMemoryCache</a></li>
<li><a href="https://github.com/ishkawa/ISDiskCache">ISDiskCache</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSシミュレータの日本語フォントが変になるのを防ぐ]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/02/04/ja-font/"/>
    <updated>2014-02-04T14:03:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/02/04/ja-font</id>
    <content type="html"><![CDATA[<p><a href="http://frnk.hatenablog.jp/entry/2014/02/04/120053">iOSシミュレータの日本語フォントが変になっちゃったときの対処法 &ndash; らっこのじゆうちょう</a></p>

<p>こちらの記事にある通り、日本語よりも中国語が優先されていると日本語のフォントがおかしくなってしまうのですが、設定画面から日本語に設定し直すのはちょっとだけ面倒です。
Arguments Passes On Launchに以下の値を設定しておくと、必ず日本語に設定された状態でアプリが立ち上がるので、付き合いが長いプロジェクトでは設定しておくと楽かもしれません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-AppleLanguages (ja)</span></code></pre></td></tr></table></div></figure>


<p><img src="http://blog.ishkawa.org/images/2014-02-04/ss.png"></p>

<p>参考: <a href="http://qiita.com/jarinosuke@github/items/f83e846ffb866ca5b7b7">iOS &ndash; Launch Arguments を使った一つ上の NSLocalizedString &ndash; Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#confwd でOSSでのObjective-Cの書き方について話してきた]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/02/02/programming-guide-for-oss-in-confwd2/"/>
    <updated>2014-02-02T16:11:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/02/02/programming-guide-for-oss-in-confwd2</id>
    <content type="html"><![CDATA[<p><a href="http://confwd2.peatix.com">Conference With Developers 2 | Peatix</a></p>

<p>自分はiOSデベロッパーとして大した経験や実績があるわけではないのですが、
公開しているライブラリの数はかなり多い方のなので、そこで得られた知識を話そうと思いました。
トーク中は聴いている人のリアクションを気にする余裕もなかったのですが、
あとからTwitterのタイムラインを読んでみると、良い反応をしてくれている方もいたようで嬉しかったです。
今回の発表ではどのトピックも詳細に立ち入ることが難しかったので、いつか文章でしっかりとまとめられるといいなと思いました。</p>

<h3>トークの準備</h3>

<p>大勢の前で45分も話し続けるのは初めてだったので、どうやって準備したらいいものか悩みました。
スライドをつくりながらトークの内容を練るのは難しそうだったので、はじめはmarkdownで適当な文章を書いて、
そこからの大事な単語や文を拾ってきたり、概念図を描き起こしたりしました。
元のmarkdownは以下のものです。人に読まれることを想定して書いたわけではないので読みづらいかもしれません。</p>

<p><a href="https://gist.github.com/ishkawa/82fb589f447394f37546">gist:82fb589f447394f37546</a></p>

<h3>資料</h3>

<p>　</p>

<script async class="speakerdeck-embed" data-id="be0674406d3f0131488e0ea0271811b0" data-ratio="1.33333333333333" src="http://blog.ishkawa.org//speakerdeck.com/assets/embed.js"></script>


<h3>ビデオ</h3>

<iframe width="720" height="437" src="http://www.ustream.tv/embed/recorded/43319245/highlight/461451?v=3&amp;wmode=direct" scrolling="no" frameborder="0" style="border: 0px none transparent;">    </iframe>


<br /><a href="http://www.ustream.tv/" style="padding: 2px 0px 4px; width: 400px; background: #ffffff; display: block; color: #000000; font-weight: normal; font-size: 10px; text-decoration: underline; text-align: center;" target="_blank">Video streaming by Ustream</a>


<p>　</p>

<p>トークやLTはどれも面白く、他の開発者との交流でき、とても充実したイベントでした。
登壇を提案していただいた矢口さん、開催スタッフのみなさんに感謝しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCTest + iOS 7でCoverallsを利用する]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/01/15/ios7-xctest-coveralls/"/>
    <updated>2014-01-15T23:14:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/01/15/ios7-xctest-coveralls</id>
    <content type="html"><![CDATA[<p>XCTest + iOS7でテストを実行しても上手くコードカバレッジが取得できずに困っていたのですが、
最近<a href="https://twitter.com/tokorom">@tokorom</a>さんが取得できる方法を紹介していたので、
そちらを参考にして対応してみました。資料は以下のものです。</p>

<p><a href="https://speakerdeck.com/tokorom/my-unit-test-environment-for-objective-c">My unit test environment for Objective-C</a></p>

<p>Coverallsに対応したライブラリは以下のものです。</p>

<ul>
<li><a href="http://github.com/ishkawa/ISHTTPOperation">ISHTTPOperation</a></li>
<li><a href="http://github.com/ishkawa/ISDiskCache">ISDiskCache</a></li>
<li><a href="http://github.com/ishkawa/ISMemoryCache">ISMemoryCache</a></li>
<li><a href="http://github.com/ishkawa/NSRunLoop-PerformBlock">NSRunLoop+PerformBlock</a></li>
</ul>


<p>対応の肝となるのは<a href="http://github.com/ishkawa/ISGcovFlusher">ISGcovFlusher</a>をテストターゲットに追加しておくことです。
これを追加することでテスト終了時に<code>__gcov_flush()</code>を自動的に呼んでくれて<code>*.gcda</code>が出力されるようになります。
なお、<code>__gcov_flush()</code>を呼び出すにはBuild Settingsの&#8221;Instrument Program Flow&#8221;と&#8221;Generate Test Coverage Files&#8221;をYESにする必要があるようです。</p>

<p>その他の詳しいことは各リポジトリの以下のファイルを参照してください。</p>

<ul>
<li>Podfile</li>
<li>Makefile</li>
<li>.travis.yml</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[デバッグ中にJSONをサッと出力する]]></title>
    <link href="http://blog.ishkawa.org/blog/2014/01/09/lldb-json/"/>
    <updated>2014-01-09T00:44:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2014/01/09/lldb-json</id>
    <content type="html"><![CDATA[<p>NSDictionaryやNSArrayのdescriptionはそれとなく見やすいフォーマットで出力されますが、JSONで欲しくなる場合があります。
しかも、デバッグ中に欲しくなったりします。
XcodeのLLDBは<code>~/.lldbinit-Xcode</code>に独自のコマンドを定義することができるので、
pretty printedなJSONを吐くコマンドを定義してカジュアルにJSONを得られるようにしてみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command regex pj 's/^(.+)$/po [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:%1 options:1 error:nil] encoding:4]/'</span></code></pre></td></tr></table></div></figure>


<p>ここで定義した<code>pj</code>コマンドを使うと以下のようなNSDictionaryから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;date&quot;</span><span class="o">:</span> <span class="s">@&quot;01-08-2014&quot;</span><span class="p">,</span>
</span><span class='line'>                             <span class="s">@&quot;time&quot;</span><span class="o">:</span> <span class="s">@&quot;03:55:15&quot;</span><span class="p">,</span>
</span><span class='line'>                             <span class="s">@&quot;epoch&quot;</span><span class="o">:</span> <span class="err">@</span><span class="mi">1389196515937</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下のようなJSONを得られます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span> <span class="o">:</span> <span class="s">&quot;03:55:15&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;epoch&quot;</span> <span class="o">:</span> <span class="mi">1389196515937</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;date&quot;</span> <span class="o">:</span> <span class="s">&quot;01-08-2014&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>元ネタは<a href="https://twitter.com/dealforest/status/420943227294736384">@dealforest</a>さんの以下の記事です。<br/>
UIViewのrecursiveDescriptionを出力するコマンドなどの便利な例も紹介されています。</p>

<p><a href="http://qiita.com/dealforest/items/e3a5284badd17733ccc1">続・Debugger の Tips &ndash; Qiita [キータ]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcodebuildのログをxcprettyで整える]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/12/11/xcpretty/"/>
    <updated>2013-12-11T00:16:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/12/11/xcpretty</id>
    <content type="html"><![CDATA[<p>Xcode 5になってから<code>xcodebuild</code>も進化していて、Xcode 4までネックになっていたApplication Testsの実行も簡単になりました。
そういうわけで自分にとっての<code>xctool</code>の必要性は薄まり、あとはログさえキレイになってくれればいいのになあと思っていたのですが、そんなときに<code>xcpretty</code>が登場しました。</p>

<p><a href="https://github.com/mneorr/XCPretty">mneorr/XCPretty</a></p>

<h3>xctoolとの違い</h3>

<p><code>xctool</code>は<code>xcodebuild</code>を置き換えることを目的としていましたが、<code>xcpretty</code>は<code>xcodebuild</code>と共存してログの整形のみを行います。
<code>xctool</code>の場合、&#8221;<code>xcodebuild</code>では動くけど<code>xctool</code>では動かない&#8221;という状況に遭遇することがありますが、
<code>xcpretty</code>はビルドやテストの実行自体に<code>xcodebuild</code>を利用するので、既に<code>xcodebuild</code>で進んでいるプロジェクトでは簡単に利用を始めることができます。</p>

<h3>インストール方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install xcpretty</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcodebuild | xcpretty -c</span></code></pre></td></tr></table></div></figure>


<h3>実行例</h3>

<p>例として<a href="https://github.com/ishkawa/ISHTTPOperation">ISHTTPOperation</a>のユニットテストの結果を<code>xcpretty</code>で出力します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcodebuild clean test -sdk iphonesimulator -scheme ISHTTPOperation -configuration Debug -destination "name=iPhone Retina (3.5-inch),OS=7.0" | xcpretty -c</span></code></pre></td></tr></table></div></figure>


<p>結果は以下のようになります。テスト結果として必要十分な情報量だと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>✓ Cleaning ISHTTPOperation/ISHTTPOperation [Debug]
</span><span class='line'>✓ Building ISHTTPOperation/ISHTTPOperation [Debug]
</span><span class='line'>✓ Compiling ISHTTPOperationQueue.m
</span><span class='line'>✓ Compiling NSOperationQueue+HTTP.m
</span><span class='line'>✓ Compiling ISHTTPOperation.m
</span><span class='line'>✓ Building library libISHTTPOperation.a
</span><span class='line'>✓ Building ISHTTPOperation/ISHTTPOperationTests [Debug]
</span><span class='line'>✓ Running script 'Run Script'
</span><span class='line'>Test Suite '/Users/ishkawa/Library/Developer/Xcode/DerivedData/ISHTTPOperation-bmnqbihsbwzsicguaxfhmfoznrvq/Build/Products/Debug-iphonesimulator/ISHTTPOperationTests.octest(Tests)' started
</span><span class='line'>Test Suite 'ISHTTPOperationQueueTests' started
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithHTTPMethod (0.016 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithHost (0.001 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithPath (0.001 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testCancelOperationsWithURL (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationQueueTests testDefaultQueue (0.002 seconds)
</span><span class='line'>Test Suite 'ISHTTPOperationTests' started
</span><span class='line'>✓  ISHTTPOperationTests testCancel (0.100 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testCancelAsynchronously (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testConcurrencyType (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testDeallocOnCancelAfterStart (0.100 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testDeallocOnCancelBeforeStart (0.100 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testDesignatedInitializer (0.000 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testErrorConnection (0.101 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testNormalConnection (0.202 seconds)
</span><span class='line'>✓  ISHTTPOperationTests testQueueing (0.000 seconds)
</span><span class='line'>Test Suite 'NSOperationQueueHTTPTests' started
</span><span class='line'>✓  NSOperationQueueHTTPTests testDefaultHTTPQueue (0.000 seconds)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis CIがXcode 5に対応してからのあれこれ]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/28/xcode-5-xcodebuild/"/>
    <updated>2013-11-28T20:34:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/28/xcode-5-xcodebuild</id>
    <content type="html"><![CDATA[<p>Xcode 5のxcodebuildでテストを実行するには<code>xcodebuild test</code>を使うといいみたいです。
<code>man xcodebuild</code>のbuildactionの説明に以下のように書かれているので<code>-scheme SchemeName</code>が必要となります。
Travis CIなどの手元以外の環境でbuild schemeを利用する場合には、他の環境でも同じbuild schemeを使えるようにする必要があるので、
あらかじめXcodeのManage SchemeというメニューのShareというチェックボックスを有効しておく必要があります。</p>

<blockquote><p>This requires specifying a scheme and optionally a destination.</p></blockquote>

<p>Xcode 4のときにはMakefileを以下のように書いていましたが</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test:
</span><span class='line'>    xcodebuild \
</span><span class='line'>        -sdk iphonesimulator \
</span><span class='line'>        -target ISFooTests \
</span><span class='line'>        -configuration Debug \
</span><span class='line'>        clean build \
</span><span class='line'>        TEST_AFTER_BUILD=YES</span></code></pre></td></tr></table></div></figure>


<p><code>xcodebuild test</code>を使う形式に書き換えると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test:
</span><span class='line'>    xcodebuild \
</span><span class='line'>        -sdk iphonesimulator \
</span><span class='line'>        -scheme ISFoo \
</span><span class='line'>        -configuration Debug \
</span><span class='line'>        clean build test</span></code></pre></td></tr></table></div></figure>


<p>という感じになります。</p>

<p>Xcode 4では普通にテストを書いて適切にcpp-coverallsを実行すればコードカバレッジまで取得できたのですが、
Xcode 5では<code>*.gcda</code>が出力されなくなってしまったらしくてそのままではコードカバレッジを測れないようです。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/_ishkawa">@_ishkawa</a> iOS7だと.gcdaが出てこない問題?&#10;<a href="http://t.co/PCPIVz2BDU">http://t.co/PCPIVz2BDU</a>&#10;<a href="https://t.co/4ESNcybO8W">https://t.co/4ESNcybO8W</a></p>&mdash; azu (@azu_re) <a href="https://twitter.com/azu_re/statuses/405963463421218816">2013, 11月 28</a></blockquote>


<script async src="http://blog.ishkawa.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>詳しい話は<a href="https://twitter.com/azu_re">@azu_re</a>さんのツイートのリンク先に書いてあって、
テスト完了後に<code>__gcov_flush()</code>というものを実行すると解決できるようなのですが、まだ試していません。</p>

<p>上手くいっている例があったら覗きに行きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[単体テストの実行時に非同期処理を待つ]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/22/wait-async-task/"/>
    <updated>2013-11-22T00:23:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/22/wait-async-task</id>
    <content type="html"><![CDATA[<p>SenTestingKit/XCTestは非同期処理を待たずにテストケースを終了してしまうので、
直接SenTestingKit/XCTestを利用する場合には自分でNSRunLoopを回して処理の完了を待つ必要があります。
これまでSenTestCaseにfinishedフラグが追加されたサブクラスを使ったりしていたのですが、
どうしてもテストコードが明示的にならなくて悩んでいました。</p>

<p>いままで書いていたテストコードは以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testExample</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// step 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// step 3</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">stopWaiting</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// step 2</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">startWaiting</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// step 4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これではどのようにして待っているのかあまり想像がつきませんし、順序をひと目で理解することも難しいです。
そこで、昨日新しい方法を考えました。
以下のように書くと、実行順序も上から順番通りになりますし、何をしているのか明示的になったと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testPerformBlockAndWait</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// step 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">performBlockAndWait:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="o">*</span><span class="n">finish</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">// step 2</span>
</span><span class='line'>            <span class="o">*</span><span class="n">finish</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// step 3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NSRunLoopのperformBlockAndWait:は新しく拡張したメソッドで、名前からわかる通りNSManagedObjectContextの
performBlockAndWait:を使っているときに思いつきました。
BOOL *を渡すアイディアはNSArrayのenumerateObjectsUsingBlock:を真似しました。</p>

<p>このコードを使えるようにするためのNSRunLoopのカテゴリはまとめて以下のリポジトリに置いてあります。
興味がある人は是非使ってみてください。
もっといいアイディアがあるという人は是非教えて下さい。</p>

<p><a href="https://github.com/ishkawa/NSRunLoop-PerformBlock">NSRunLoop-PerformBlock</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISPersistentStackというCoreDataのヘルパーを書いた]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/18/persistent-stack/"/>
    <updated>2013-11-18T01:23:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/18/persistent-stack</id>
    <content type="html"><![CDATA[<p>最近iOS 4を相手にする機会がなくなったので、いつも使うCoreDataのヘルパーを共通化しようと思い、ついでに公開することにしました。
あまり他人が使うことを想定したつくりになっていないので、そのまま使おうとするとちょっと苦労するかもしれません。</p>

<p><a href="https://github.com/ishkawa/ISPersistentStack">ISPersistentStack</a></p>

<p>いままで使っていたものをそのままコピペすればOKかと思っていたんですが、できるだけ幅広い構造に対応できるようにするには
いくらか抽象化が必要となりました。サブクラスを作ってしまえば&#8221;一般的な&#8221;ケースには対応できると思うのですが、
少し凝ったつくりには対応できない場合があると思います。(そういう理由もあって、CocoaPodsには送らない予定です。)</p>

<h3>主な機能</h3>

<ul>
<li>メインのNSManagedObjectContextの提供</li>
<li>永続ストアとNSManagedObjectModelの互換性のチェック</li>
<li>永続ストアの廃棄</li>
</ul>


<p>Web APIのクライアントのアプリの場合、消してはいけないデータはあまりないので、自分はよく以下のようにして使います。
このようにすると、永続ストアのモデルとバンドルされているモデルが一致しない場合にデータベースを捨ててくれます。
捨ててはいけないデータがある場合にも<code>#ifdef DEBUG</code>を利用すればデバッグに役立つかもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">ISPersistentStack</span> <span class="o">*</span><span class="n">persistentStack</span> <span class="o">=</span> <span class="p">[</span><span class="n">ISPersistentStack</span> <span class="n">sharedStack</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">persistentStack</span><span class="p">.</span><span class="n">isCompatibleWithCurrentStore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">persistentStack</span> <span class="n">deleteCurrentStore</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>想定しているケース</h3>

<ul>
<li>単一のNSPersistentStore</li>
<li>単一のNSManagedObjectModel(複数バージョンは想定内)</li>
<li>複数のNSManagedObjectContext(ただし、main queueのcontextはISPersistentStackが提供するものを利用)</li>
</ul>


<p>デフォルトで使用するNSPersistentStoreはドキュメント以下の<code>Model.sqlite</code>となっていて、
モデルはメインバンドル以下の<code>Model.momd</code>となっています。
もしここから外れる場合にはISPersistentStackのサブクラスを作成してstoreURL, modelURL, sharedStackをオーバーライドする必要があります。
その他にもmanagedObjectModel, persistentStoreCoordinator, managedObjectContextをオーバーライドすることもできます。</p>

<h3>感想</h3>

<p>CoreDataのオレオレ便利ヘルパーは他人にとっても使いやすい形にするのは難しいなあと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSONにNSNullが入ってきたとき]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/16/nsnull/"/>
    <updated>2013-11-16T20:55:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/16/nsnull</id>
    <content type="html"><![CDATA[<p>多くのiOSアプリはサーバーとの通信が必要で、やりとりされるデータのフォーマットにはJSONが採用されることが多いと思います。
iOS 5からは標準ライブラリにNSJSONSerializationが導入され、特に理由がなければJSONのエンコード/デコードにはこれを利用します。
NSJSONSerializationが扱うオブジェクトは以下の5種類のオブジェクトです。</p>

<ul>
<li>NSString</li>
<li>NSNumber</li>
<li>NSArray</li>
<li>NSDictionary</li>
<li>NSNull</li>
</ul>


<p>そこで心配になるのが、予期しないところにNSNullが入ってきて&#8221;unrecognized selector sent to instance.&ldquo;となってしまうことです。
NSNullではなくてnilが入っていてほしいと考える人は多いようですが、そもそもNSArrayやNSDictonaryはnilを含むことはできず、
そのような状況でnull値を表すためにNSNullが存在するのです。NSNullのドキュメントにもまさにその通りのことが書いてあります。</p>

<blockquote><p>The NSNull class defines a singleton object used to represent null values in collection objects (which don’t allow nil values).</p></blockquote>

<p>しかし、実際NSNullが原因となってクラッシュすることもあるので、それを回避する方法と、
それらの方法を利用するときに気をつけるべきことを書きます。</p>

<h3>NSNullをnilとして振る舞わせる方法</h3>

<p>NSNullのforwardInvocation:とmethodSignatureForSelector:を上手く書き換えると、
NSNullは実装されていないメソッドの呼び出しは無視するようになり、&#8221;unrecognized selector sent to instance.&ldquo;を回避できるようになります。
このテクニックは以前からよく知られていたもので、自分は<a href="https://twitter.com/k_katsumi">@k_katsumi</a>さんの
<a href="http://d.hatena.ne.jp/KishikawaKatsumi/20110505/1304598102">ブログ</a>で見たのが最初でした。
ライブラリとしてまとまっているものにはnicklockwood氏の<a href="https://github.com/nicklockwood/nullsafe">NullSafe</a>などがあります。</p>

<p>このテクニックの良いところはNSNullがオブジェクトであることを半分忘れてしまって、まるでnilのように扱えることです。
一度アプリの何処かでこれを実装してしまえば、二度とNSNullが&#8221;unrecognized selector sent to instance.&ldquo;をあげることがなくなります。</p>

<p>逆に良くないところもあって、その1つはNSNullは完全にnilになるわけではないということです。
例えば以下のコードで<code>[dictionary objectForKey:@"foo"]</code>がNSNullを返す場合、条件式はYESとなります。
つまり、NSNullは依然としてnilではなく、単に&#8221;unrecognized selector sent to instance&#8221;をあげなくなっただけということを頭に入れなければなりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">dictionary</span> <span class="nl">objectForKey:</span><span class="s">@&quot;foo&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、アプリ全体に影響を与えてしまうということもあまり良いことではないのかもしれません。
このテクニックはNSNullの本来の役割である&#8221;null値を表すsingleton&#8221;という性質を壊すことなく実装されているのですが、
CocoaPodsが十分に普及してきた昨今、グローバルなものの振る舞いを変えることは十分に検討した方が良さそうです。
それと、&#8221;処理上に明示されてない何かによって本来とは違う挙動になる&#8221;ということも忘れてはいけません。</p>

<h3>NSNullを一括で削除してしまう方法</h3>

<p>前の方法が高度なテクニックを利用したhackだったのに対して、こちらは愚直な方法です。
NSArrayやNSDictionaryのvalueを探索してNSNullを削除してしまえば、[NSArray objectAtIndex:]や
[NSDictionary objectForKey:]でNSNullが返ってくることはありません。
NSDictionaryに関して言えば、元々NSNullが入っていたkeyに対してobjectForKey:は本物のnilを返すので、
前のテクニックよりも望ましい状態になると言えます。</p>

<p>当然のことなんですが、NSNullが削除されてしまうと[NSArray count]や[[NSDictionary allValues] count]は変わってしまうので、
countが重要なケースではNSNullが削除されていることを頭に入れておく必要はあります。</p>

<p>NSNullの一括削除を実装するのは地味に面倒な上にミスをしやすいので、
自分はいつも<a href="https://github.com/ishkawa/ISRemoveNull">ISRemoveNull</a>を利用しています。
以下のようなコードでNSNullがすべて削除されたNSDictionaryを得ることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">strippedDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">dictionary</span> <span class="n">dictionaryByRemovingNull</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>ISRemoveNullはデフォルトで再帰的にNSArrayやNSDictionaryを探索するつくりになっているので、
深いネストがあるJSONのNSNullもすべて取り除くことができます。</p>

<h3>おまけ: NSNullを判別する条件式</h3>

<p>NSNullを判別する条件式は以下のものが妥当なようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">object</span> <span class="o">==</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// object is null</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>もちろん、<code>[object isEqual:[NSNull null]]</code>や<code>[object isKindOfClass:[NSNull class]]</code>でも判別できるのですが、
NSNullはそもそもsingletonなのでisEqual:やisKindOfClass:で比較する必要はないのです。
(必要はないというだけで、isEqual:やisKindOfClass:が間違いというわけではありません。)</p>

<p>ちなみに、Appleのサンプルコードでも<code>object == [NSNull null]</code>が利用されていました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#potatotips で隅々までタップできるUINavigationBarの話をしました]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/11/15/potatotips-1/"/>
    <updated>2013-11-15T01:22:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/11/15/potatotips-1</id>
    <content type="html"><![CDATA[<p>potatotipsというのはクックパッドさんが開催しているiOS/Android開発者のtips共有会です。
普段は社内のメンバーで定期的に行っているそうなんですが、今回は社外の開発者も含めて開催でした。
持ち時間は1人あたり5分と短かったので、すぐに活用できそうなtipsが多かったように思います。</p>

<h3>話したこと</h3>

<p>iOS 7になってからUINavigationBarのcustomViewが中央寄りになってしまい、
バーの両サイドに配置されたカスタムボタンが押しにくいという問題が起きました。
これだけを理由にUINavigationBarを使うのを辞めるのはもったいないので、
customViewのフレームに影響されずに隅々までタップできるUINavigationBarを実現する方法を考えました。</p>

<p>実装のアイディアは結構単純で、customViewのフレーム外であってもタッチイベントの位置にsubviewがあれば、
タッチイベントを貫通させるというものです。イメージがつきにくい話だとは思うのですが、
たぶん同じような問題に直面した人には通じる話だと思います。</p>

<p>　</p>

<script async class="speakerdeck-embed" data-id="9d882ad02e7e0131dc8166d07d2effc2" data-ratio="1.33333333333333" src="http://blog.ishkawa.org//speakerdeck.com/assets/embed.js"></script>


<p>一応このtipsをライブラリにまとめたので、何を言ってるのかサッパリわからなかった人も、
以下のライブラリを入れればとにかくUINavigationBarが隅々までタップできるようになります。</p>

<p><a href="https://github.com/ishkawa/ISInteractiveEdgesNavigationBar">ISInteractiveEdgesNavigationBar</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">Class</span> <span class="n">navigationBarClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">ISInteractiveEdgesNavigationBar</span> <span class="n">class</span><span class="p">];</span>
</span><span class='line'><span class="n">Class</span> <span class="n">toolbarClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIToolbar</span> <span class="n">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UINavigationController</span> <span class="o">*</span><span class="n">navigationController</span> <span class="o">=</span>
</span><span class='line'><span class="p">[[</span><span class="n">UINavigationController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithNavigationBarClass:</span><span class="n">navigationBarClass</span>
</span><span class='line'>                                              <span class="nl">toolbarClass:</span><span class="n">toolbarClass</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>感想</h3>

<p>tips共有会は小規模なら簡単に開催できるし有益なので、周りを適当に誘ってみよう思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数のiOSバージョンでのテストを自動的に実行する]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/10/06/run-tests-for-all-destinations/"/>
    <updated>2013-10-06T21:47:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/10/06/run-tests-for-all-destinations</id>
    <content type="html"><![CDATA[<p>Xcode 5になって<code>xcodebuild</code>コマンドも進化したらしいのですが、あまり変更を追えていませんでした。
今日、ぼんやりと<code>man xcodebuild</code>を眺めていたら<code>-destination</code>というオプションをみつけました。
これを使えば任意のiOSバージョンでテストを走らせられるなと思ってやってみました。</p>

<p>はじめはXCTestで実行したかったのですが、<code>iPhoneSimulator6.0.sdk</code>や<code>iPhoneSimulator5.0.sdk</code>には
<code>xctest</code>という実行ファイルが含まれていないため、以下のようなコマンドでテストを実行することができませんでした。
(OS=7.0だと実行できます。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>xcodebuild <span class="nb">test</span> -scheme Example -destination <span class="s2">&quot;name=iPhone,OS=6.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>OCUnitを実行する<code>ounit</code>という実行ファイルは<code>iPhoneSimulator6.0.sdk</code>や<code>iPhoneSimulator5.0.sdk</code>にも含まれているので、
仕方がなくOCUnitでセットアップしなおしました。
すると、同じコマンドでiOS 6のシミュレーターでのテストを実行できるようになりました。</p>

<p>ここまでできれば、あとは複数のdestinationに対して自動的に実行できるようにするだけです。
以下のようなRakefileを書いておくと<code>DESTINATIONS</code>に並べたすべてのdestinationでのテストが、
<code>rake</code>で実行できるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SCHEME</span> <span class="o">=</span> <span class="s2">&quot;Example&quot;</span>
</span><span class='line'><span class="no">DESTINATIONS</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;name=iPhone,OS=5.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone,OS=6.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (3.5-inch),OS=5.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (3.5-inch),OS=6.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (3.5-inch),OS=7.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (4-inch),OS=6.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (4-inch),OS=7.0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;name=iPhone Retina (4-inch 64-bit),OS=7.0&quot;</span><span class="p">,</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:clean</span><span class="p">,</span> <span class="ss">:test</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;clean&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:clean</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s2">&quot;xcodebuild clean&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;run unit tests&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DESTINATIONS</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">destination</span><span class="o">|</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s2">&quot;xcodebuild test -scheme </span><span class="si">#{</span><span class="no">SCHEME</span><span class="si">}</span><span class="s2"> -destination </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">destination</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルのプロジェクトはGitHubに置いてあります。<br/>
<a href="https://github.com/ishkawa/RunTestsForAllDestinationsExample">ishkawa/RunTestsForAllDestinationsExample</a></p>

<p>Travis CIがXcode 5に対応するのが楽しみになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[main queueのNSManagedObjectContextの話]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/26/main-queue-context/"/>
    <updated>2013-09-26T02:25:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/26/main-queue-context</id>
    <content type="html"><![CDATA[<p>ふとTwitterで<a href="https://twitter.com/cockscomb/status/382914504637419520">@cockscomb</a>さんと<a href="https://twitter.com/k_katsumi">@k_katsumi</a>さんとCoreDataの話になって考えました。
これから書くことは正しさが曖昧なので、鵜呑みにしないように気をつけてください。
なお、マルチスレッドに関する話にはここでは触れません。</p>

<h3>前提</h3>

<p>CoreDataを使うときにNSManagedObjectContext, NSPersistentStoreCoordinator, NSManagedObjectModelを持つ、以下のようなsingletonを作ったことがあると思います。
こういう実装をすると確かに便利なんですが、共有されたNSManagedObjectContextが色んな所からアクセスされることになって、それをどうにかしたいなと思いました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreData/CoreData.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CDECoreDataManager</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">sharedManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>共有されたNSManagedObjectContextを避けたい理由</h3>

<p>UIViewControllerは基本的に他のUIViewControllerから独立していて、1つの画面のことだけを考えて実装すればいいと思います。
共有されたNSManagedObjectContextを避けたい理由は、このような状況を壊してしまうからです。
singletonを介しているので当然といえばその通りなんですが、そのことに気がついたときには少し驚きました。</p>

<p>例を1つ挙げます。
NSFetchedResultsControllerのデリゲートメソッドにはcontrollerDidChangeContent:というものがあります。
このメソッドはNSFetchedResultsControllerがNSManagedObjectContextの変更を検知したときに呼ばれるものです。
つまり、NSManagedObjectContextが共有されている場合、どこか1箇所でNSManagedObjectContextに変更を与えると、
生存しているすべてのNSFetchedResultControllerについてこのデリゲートメソッドが呼ばれてしまうのです。
controllerDidChangeContent:の中身が全箇所で一斉に走っても問題ないことが多いとは思いますが、
全箇所で意図していなかった何かが一斉に走るということはできるだけ避けたいと自分は考えました。</p>

<p>再現するサンプルコードも用意しました。
Push next view controllerというボタンを何度か押してから、+ボタンを押してみてください。
すると、すべてのNSFetchedResultsControllerについてデリゲートメソッドが呼ばれます。</p>

<p><a href="https://github.com/ishkawa/CoreDataExperiment">サンプルコード</a></p>

<h3>Appleが示す方法は？</h3>

<p>CoreData snippetsというドキュメントの<a href="https://developer.apple.com/library/mac/documentation/DataManagement/Conceptual/CoreDataSnippets/Articles/stack.html#//apple_ref/doc/uid/TP40008283-SW2">Accessing the Core Data Stack</a>によると、
CoreDataを利用するUIViewControllerにはNSManagedObjectContextのpropertyを用意して、既存のNSManagedObjectContextを渡す、
もしくは(そのUIViewControllerの編集が既存のものとは分離されている場合に)新たなNSManagedObjectContextつくりなさいとのことでした。
既存のものとして渡されるNSManagedObjectContextはApplication Delegateが作成して、最初のUIViewControllerに渡すべきだそうです。</p>

<p>つまり、Appleは共有されたNSManagedObjectContextを利用すべきと言うと同時に、編集が分離されている場合は新しいのNSManagedObjectContextもつくっていいとも言っています。
これらに加えて以下のようにも言っています。</p>

<ul>
<li>Application DelegateのようなグローバルなオブジェクトからNSManagedObjectContextを取得するべきではない</li>
<li>各UIViewController自身のためだけのNSManagedObjectContextをつくるべきではない</li>
</ul>


<p>そうなると、どちらも行き過ぎてはよくないということなんでしょうか。何がよりよいのかわからなくなってきます。</p>

<h3>実際みんなどうやってるの？</h3>

<p>はじめに書いた方法のような感じで、main queueのNSManagedObjectContextは1つでやっているようです。
自分もこの方法でやっていましたが、先に紹介した理由もあってモヤモヤしています。</p>

<h3>UIViewController毎にNSManagedObjectContextをつくるべきではない理由は？</h3>

<p>意見募集中です。Twitterやメールなどで教えていただけると幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2013に参加してきました]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/22/yapc/"/>
    <updated>2013-09-22T17:15:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/22/yapc</id>
    <content type="html"><![CDATA[<p>Perlの人じゃなくても楽しいと聞いて参加してきました。</p>

<p>Perlの世界で活躍する人たちの長めのトークを聞けるだけでもありがたいことですが、
その後は個人的に話を聞きに行ったりできる雰囲気になっていてすごく良いなと思いました。
会場の広場やバーでは似たような関心を持った人たちが議論していてうらやましかったのですが、
こういうのは数日間開催されているからこそできることなんだなと思いました。</p>

<p>iOS界隈でもこういうのがあったらいいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5でテストを分割実行する]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/19/xcode-5-test/"/>
    <updated>2013-09-19T11:40:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/19/xcode-5-test</id>
    <content type="html"><![CDATA[<p>command + option + control + U で実行できます。</p>

<p>テストコードのファイルを開いているときに、テストケース内にカーソルを置いているとそのテストケースのみ実行され、
テストケース外にカーソルを置いているとそのファイルのテストがすべて実行されます。</p>

<p>SenTestingKit, XCTestのみで動作を確認しました。
いまのところのKiwiはまだこの機能に対応していなくて、個別の単位(<code>describe</code>, <code>context</code>, <code>it</code>など)での実行はできません。
未確認ですが、GHUnitは仕組みから考えると全く対応していないと思います。</p>

<p>分割実行できるようになると気軽にテストを走らせるようになって、テストが捗ります。<br/>
SenTestingKitベースになったKIFも分割実行できるので、UIテストも捗りますね。</p>

<h3>追記 (2013/9/20)</h3>

<p>今日リリースされたKiwi 2.2.2でファイル単位の個別の実行ができるようになったみたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HHK無刻印モデルを3週間使った感想]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/09/15/hhk/"/>
    <updated>2013-09-15T10:51:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/09/15/hhk</id>
    <content type="html"><![CDATA[<p>最近<a href="http://www.pfu.fujitsu.com/hhkeyboard/lineup/pdkb400bn.html">HHK Pro 2の無刻印モデル</a>を使い始めました。<br/>
<a href="http://twitter.com/soh335">斜に構えおじさん</a>に中2とか言われてバカにされたりしました。</p>

<blockquote class="twitter-tweet"><p>無刻印 メリット 何</p>&mdash; soh335 (@soh335) <a href="https://twitter.com/soh335/statuses/371610150659825664">August 25, 2013</a></blockquote>


<script async src="http://blog.ishkawa.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>　</p>

<p>3週間くらい使って結構慣れてきたので感想を書きます。</p>

<ul>
<li>意外とタッチタイピングができていなかったことに気づいた</li>
<li>タッチタイピングができるようになって視線の移動がかなり減った</li>
<li>キーを入れ替えるのに抵抗がなくなった</li>
<li>ｯﾀｰﾝってやるの最高に気持ちいい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[次世代のKIF(2.0.0)が良さそう]]></title>
    <link href="http://blog.ishkawa.org/blog/2013/08/31/kif-next/"/>
    <updated>2013-08-31T19:51:00+09:00</updated>
    <id>http://blog.ishkawa.org/blog/2013/08/31/kif-next</id>
    <content type="html"><![CDATA[<p>KIFはSquare製のIntegration Testsのためのフレームワークです。
この半年くらいでKIFは大幅なアップデートに取り組んでいるらしく、現在はプレリリース版の2.0.0pre5が公開されています。
まだ正式版はリリースされていないのですが、ひとまずプレリリース版を動かしてみました。</p>

<p><a href="https://github.com/kif-framework/KIF/tree/kif-next">KIF(kif-next)</a></p>

<p>　</p>

<p>KIFは元々GHUnitのようにアプリのビルドターゲットを複製し、エントリーポイントを少し変更することで複製したアプリ上でテストを走らせるというものでした。
新しいバージョンではSenTestingKitを利用することでXcodeに統合されたテストとして実行できるようになりました。
具体的には以下のようなメリットがあります。</p>

<ul>
<li>command+Uで実行できる</li>
<li>エラーが出た箇所を追跡しやすい</li>
<li>部分実行ができる</li>
<li>xUnit/xSpec形式でテストを書ける</li>
</ul>


<p>SenTestingKitを利用している他のフレームワーク(Spectaとか)も利用できるようです。</p>

<p>以下は実機上で動かしている様子です。</p>

<iframe class="embed-preview" src="http://blog.ishkawa.org//gifboom.com/x/a8a13526/embed_content" width="600" height="600" frameborder="0" scrolling="no"></iframe>


<script async src="http://blog.ishkawa.org//medias.gifboom.com/static/embed.1.js" charset="utf-8"></script>


<p>一応、サンプルコードをGitHubに置いておきます。</p>

<p><a href="https://github.com/ishkawa/KIFNextExample">KIFNextExample</a></p>
]]></content>
  </entry>
  
</feed>
